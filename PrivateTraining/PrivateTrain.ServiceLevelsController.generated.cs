// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace PrivateTraining.Areas.PrivateTrain.Controllers
{
    public partial class ServiceLevelsController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ServiceLevelsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddServiceLevel()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddServiceLevel);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteServiceLevel()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteServiceLevel);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditServiceLevel()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditServiceLevel);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEdit()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEdit);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ServiceLevelsController Actions { get { return MVC.PrivateTrain.ServiceLevels; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "PrivateTrain";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "ServiceLevels";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "ServiceLevels";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string ListServiceLevels = "ListServiceLevels";
            public readonly string AddServiceLevel = "AddServiceLevel";
            public readonly string DeleteServiceLevel = "DeleteServiceLevel";
            public readonly string EditServiceLevel = "EditServiceLevel";
            public readonly string LoadEdit = "LoadEdit";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string ListServiceLevels = "ListServiceLevels";
            public const string AddServiceLevel = "AddServiceLevel";
            public const string DeleteServiceLevel = "DeleteServiceLevel";
            public const string EditServiceLevel = "EditServiceLevel";
            public const string LoadEdit = "LoadEdit";
        }


        static readonly ActionParamsClass_AddServiceLevel s_params_AddServiceLevel = new ActionParamsClass_AddServiceLevel();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddServiceLevel AddServiceLevelParams { get { return s_params_AddServiceLevel; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddServiceLevel
        {
            public readonly string ServiceLevels = "ServiceLevels";
        }
        static readonly ActionParamsClass_DeleteServiceLevel s_params_DeleteServiceLevel = new ActionParamsClass_DeleteServiceLevel();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteServiceLevel DeleteServiceLevelParams { get { return s_params_DeleteServiceLevel; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteServiceLevel
        {
            public readonly string ServiceLevelId = "ServiceLevelId";
        }
        static readonly ActionParamsClass_EditServiceLevel s_params_EditServiceLevel = new ActionParamsClass_EditServiceLevel();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditServiceLevel EditServiceLevelParams { get { return s_params_EditServiceLevel; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditServiceLevel
        {
            public readonly string param = "param";
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_LoadEdit s_params_LoadEdit = new ActionParamsClass_LoadEdit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadEdit LoadEditParams { get { return s_params_LoadEdit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadEdit
        {
            public readonly string Id = "Id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _AddEdit = "_AddEdit";
                public readonly string _DeleteServiceLevel = "_DeleteServiceLevel";
                public readonly string Index = "Index";
            }
            public readonly string _AddEdit = "~/Areas/PrivateTrain/Views/ServiceLevels/_AddEdit.cshtml";
            public readonly string _DeleteServiceLevel = "~/Areas/PrivateTrain/Views/ServiceLevels/_DeleteServiceLevel.cshtml";
            public readonly string Index = "~/Areas/PrivateTrain/Views/ServiceLevels/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ServiceLevelsController : PrivateTraining.Areas.PrivateTrain.Controllers.ServiceLevelsController
    {
        public T4MVC_ServiceLevelsController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ListServiceLevelsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListServiceLevels()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListServiceLevels);
            ListServiceLevelsOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void AddServiceLevelOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceLevel ServiceLevels);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddServiceLevel(PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceLevel ServiceLevels)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddServiceLevel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceLevels", ServiceLevels);
            AddServiceLevelOverride(callInfo, ServiceLevels);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void DeleteServiceLevelOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string[] ServiceLevelId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteServiceLevel(string[] ServiceLevelId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteServiceLevel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceLevelId", ServiceLevelId);
            DeleteServiceLevelOverride(callInfo, ServiceLevelId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void EditServiceLevelOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceLevel param, int id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditServiceLevel(PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceLevel param, int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditServiceLevel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditServiceLevelOverride(callInfo, param, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void LoadEditOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int Id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEdit(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEdit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            LoadEditOverride(callInfo, Id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
