// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
using PrivateTraining.Models;

namespace PrivateTraining.Controllers
{
    public partial class AccountController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AccountController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddServiceProvider()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddServiceProvider);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditServiceProvider()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditServiceProvider);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListServiceProviderLocation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListServiceProviderLocation);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> CheckMobileUser()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckMobileUser);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetResume()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetResume);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ConfirmEmail()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ConfirmEmail);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ExternalLoginCallback()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ExternalLoginCallback);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Login()
        {
            //return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Login);
            return View(new LoginViewModel());
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> LoginPost()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LoginPost);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SendCode()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendCode);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> VerifyCode()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.VerifyCode);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ChangePasswords()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ChangePasswords);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ForgotPasswords()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ForgotPasswords);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ResetPassword()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ResetPassword);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> CheckPersonnelId()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckPersonnelId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> UpdateServiceUsers()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.UpdateServiceUsers);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteSuspension()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteSuspension);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteUsers()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteUsers);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> InactiveUsers()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.InactiveUsers);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> SuspensionUsers()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.SuspensionUsers);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult SuspensionList()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.SuspensionList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> UploadEcxel()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.UploadEcxel);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AccountController Actions { get { return MVC.Account; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Account";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Account";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string ListServiceProvider = "ListServiceProvider";
            public readonly string DisconnectProvideres = "DisconnectProvideres";
            public readonly string ShowDisconnectReasons = "ShowDisconnectReasons";
            public readonly string ListServiceReceiver = "ListServiceReceiver";
            public readonly string GetAddEditServiceProvider = "GetAddEditServiceProvider";
            public readonly string GetAddEditServiceProviderInfo = "GetAddEditServiceProviderInfo";
            public readonly string LoadEditServiceProvider = "LoadEditServiceProvider";
            public readonly string CheckCapacityServiceProviderForService = "CheckCapacityServiceProviderForService";
            public readonly string CountCapacity = "CountCapacity";
            public readonly string AddServiceProvider = "AddServiceProvider";
            public readonly string EditServiceProvider = "EditServiceProvider";
            public readonly string ListServiceProviderLocation = "ListServiceProviderLocation";
            public readonly string CheckMobileUser = "CheckMobileUser";
            public readonly string LoadEditServiceReciever = "LoadEditServiceReciever";
            public readonly string LoadServiceProviderMaxScore = "LoadServiceProviderMaxScore";
            public readonly string CheckHowPerformService = "CheckHowPerformService";
            public readonly string GetResume = "GetResume";
            public readonly string UpdateUserServiceLocations = "UpdateUserServiceLocations";
            public readonly string CheckLoginServiceReceiver = "CheckLoginServiceReceiver";
            public readonly string ListServiceLevelPost = "ListServiceLevelPost";
            public readonly string ShowAllScores = "ShowAllScores";
            public readonly string ShowAllScoreJson = "ShowAllScoreJson";
            public readonly string ConfirmEmail = "ConfirmEmail";
            public readonly string ExternalLoginCallback = "ExternalLoginCallback";
            public readonly string ExternalLoginFailure = "ExternalLoginFailure";
            public readonly string ForgotPassword = "ForgotPassword";
            public readonly string ForgotPasswordConfirmation = "ForgotPasswordConfirmation";
            public readonly string Login = "Login";
            public readonly string LoginPost = "LoginPost";
            public readonly string LogOff = "LogOff";
            public readonly string ResetPasswordConfirmation = "ResetPasswordConfirmation";
            public readonly string SendCode = "SendCode";
            public readonly string VerifyCode = "VerifyCode";
            public readonly string ChangePassword = "ChangePassword";
            public readonly string ChangePasswords = "ChangePasswords";
            public readonly string ForgotPasswords = "ForgotPasswords";
            public readonly string ResetPassword = "ResetPassword";
            public readonly string ChangePasswordAdmin = "ChangePasswordAdmin";
            public readonly string Register = "Register";
            public readonly string CheckPersonnelId = "CheckPersonnelId";
            public readonly string ListUsers = "ListUsers";
            public readonly string ListJsonUsers = "ListJsonUsers";
            public readonly string GetServiceUsers = "GetServiceUsers";
            public readonly string GetUserServiceLocations = "GetUserServiceLocations";
            public readonly string UpdateServiceUsers = "UpdateServiceUsers";
            public readonly string DeleteSuspension = "DeleteSuspension";
            public readonly string DeleteUsers = "DeleteUsers";
            public readonly string InactiveUsers = "InactiveUsers";
            public readonly string SuspensionUsers = "SuspensionUsers";
            public readonly string activateSuspension = "activateSuspension";
            public readonly string DeactivateSuspension = "DeactivateSuspension";
            public readonly string SuspensionList = "SuspensionList";
            public readonly string ImportExcelUsers = "ImportExcelUsers";
            public readonly string UploadEcxel = "UploadEcxel";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string ListServiceProvider = "ListServiceProvider";
            public const string DisconnectProvideres = "DisconnectProvideres";
            public const string ShowDisconnectReasons = "ShowDisconnectReasons";
            public const string ListServiceReceiver = "ListServiceReceiver";
            public const string GetAddEditServiceProvider = "GetAddEditServiceProvider";
            public const string GetAddEditServiceProviderInfo = "GetAddEditServiceProviderInfo";
            public const string LoadEditServiceProvider = "LoadEditServiceProvider";
            public const string CheckCapacityServiceProviderForService = "CheckCapacityServiceProviderForService";
            public const string CountCapacity = "CountCapacity";
            public const string AddServiceProvider = "AddServiceProvider";
            public const string EditServiceProvider = "EditServiceProvider";
            public const string ListServiceProviderLocation = "ListServiceProviderLocation";
            public const string CheckMobileUser = "CheckMobileUser";
            public const string LoadEditServiceReciever = "LoadEditServiceReciever";
            public const string LoadServiceProviderMaxScore = "LoadServiceProviderMaxScore";
            public const string CheckHowPerformService = "CheckHowPerformService";
            public const string GetResume = "GetResume";
            public const string UpdateUserServiceLocations = "UpdateUserServiceLocations";
            public const string CheckLoginServiceReceiver = "CheckLoginServiceReceiver";
            public const string ListServiceLevelPost = "ListServiceLevelPost";
            public const string ShowAllScores = "ShowAllScores";
            public const string ShowAllScoreJson = "ShowAllScoreJson";
            public const string ConfirmEmail = "ConfirmEmail";
            public const string ExternalLoginCallback = "ExternalLoginCallback";
            public const string ExternalLoginFailure = "ExternalLoginFailure";
            public const string ForgotPassword = "ForgotPassword";
            public const string ForgotPasswordConfirmation = "ForgotPasswordConfirmation";
            public const string Login = "Login";
            public const string LoginPost = "LoginPost";
            public const string LogOff = "LogOff";
            public const string ResetPasswordConfirmation = "ResetPasswordConfirmation";
            public const string SendCode = "SendCode";
            public const string VerifyCode = "VerifyCode";
            public const string ChangePassword = "ChangePassword";
            public const string ChangePasswords = "ChangePasswords";
            public const string ForgotPasswords = "ForgotPasswords";
            public const string ResetPassword = "ResetPassword";
            public const string ChangePasswordAdmin = "ChangePasswordAdmin";
            public const string Register = "Register";
            public const string CheckPersonnelId = "CheckPersonnelId";
            public const string ListUsers = "ListUsers";
            public const string ListJsonUsers = "ListJsonUsers";
            public const string GetServiceUsers = "GetServiceUsers";
            public const string GetUserServiceLocations = "GetUserServiceLocations";
            public const string UpdateServiceUsers = "UpdateServiceUsers";
            public const string DeleteSuspension = "DeleteSuspension";
            public const string DeleteUsers = "DeleteUsers";
            public const string InactiveUsers = "InactiveUsers";
            public const string SuspensionUsers = "SuspensionUsers";
            public const string activateSuspension = "activateSuspension";
            public const string DeactivateSuspension = "DeactivateSuspension";
            public const string SuspensionList = "SuspensionList";
            public const string ImportExcelUsers = "ImportExcelUsers";
            public const string UploadEcxel = "UploadEcxel";
        }


        static readonly ActionParamsClass_ListServiceProvider s_params_ListServiceProvider = new ActionParamsClass_ListServiceProvider();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListServiceProvider ListServiceProviderParams { get { return s_params_ListServiceProvider; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListServiceProvider
        {
            public readonly string StateId = "StateId";
            public readonly string CityId = "CityId";
            public readonly string LocationId = "LocationId";
            public readonly string ServiceId = "ServiceId";
            public readonly string StatusUserServiceLocationId = "StatusUserServiceLocationId";
        }
        static readonly ActionParamsClass_DisconnectProvideres s_params_DisconnectProvideres = new ActionParamsClass_DisconnectProvideres();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DisconnectProvideres DisconnectProvideresParams { get { return s_params_DisconnectProvideres; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DisconnectProvideres
        {
            public readonly string UserId = "UserId";
            public readonly string Reason = "Reason";
            public readonly string Type = "Type";
        }
        static readonly ActionParamsClass_ShowDisconnectReasons s_params_ShowDisconnectReasons = new ActionParamsClass_ShowDisconnectReasons();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ShowDisconnectReasons ShowDisconnectReasonsParams { get { return s_params_ShowDisconnectReasons; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ShowDisconnectReasons
        {
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_ListServiceReceiver s_params_ListServiceReceiver = new ActionParamsClass_ListServiceReceiver();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListServiceReceiver ListServiceReceiverParams { get { return s_params_ListServiceReceiver; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListServiceReceiver
        {
            public readonly string StateId = "StateId";
            public readonly string CityId = "CityId";
            public readonly string LocationId = "LocationId";
        }
        static readonly ActionParamsClass_GetAddEditServiceProvider s_params_GetAddEditServiceProvider = new ActionParamsClass_GetAddEditServiceProvider();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetAddEditServiceProvider GetAddEditServiceProviderParams { get { return s_params_GetAddEditServiceProvider; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetAddEditServiceProvider
        {
            public readonly string PmOfZarinPal = "PmOfZarinPal";
            public readonly string PmerrorOfZarinPal = "PmerrorOfZarinPal";
            public readonly string OKZarinPal = "OKZarinPal";
        }
        static readonly ActionParamsClass_GetAddEditServiceProviderInfo s_params_GetAddEditServiceProviderInfo = new ActionParamsClass_GetAddEditServiceProviderInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetAddEditServiceProviderInfo GetAddEditServiceProviderInfoParams { get { return s_params_GetAddEditServiceProviderInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetAddEditServiceProviderInfo
        {
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_LoadEditServiceProvider s_params_LoadEditServiceProvider = new ActionParamsClass_LoadEditServiceProvider();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadEditServiceProvider LoadEditServiceProviderParams { get { return s_params_LoadEditServiceProvider; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadEditServiceProvider
        {
            public readonly string ServiceReceiverServiceLocationId = "ServiceReceiverServiceLocationId";
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_CheckCapacityServiceProviderForService s_params_CheckCapacityServiceProviderForService = new ActionParamsClass_CheckCapacityServiceProviderForService();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckCapacityServiceProviderForService CheckCapacityServiceProviderForServiceParams { get { return s_params_CheckCapacityServiceProviderForService; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckCapacityServiceProviderForService
        {
            public readonly string ServiceId = "ServiceId";
            public readonly string LocationId = "LocationId";
        }
        static readonly ActionParamsClass_CountCapacity s_params_CountCapacity = new ActionParamsClass_CountCapacity();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CountCapacity CountCapacityParams { get { return s_params_CountCapacity; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CountCapacity
        {
            public readonly string LocationId = "LocationId";
        }
        static readonly ActionParamsClass_AddServiceProvider s_params_AddServiceProvider = new ActionParamsClass_AddServiceProvider();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddServiceProvider AddServiceProviderParams { get { return s_params_AddServiceProvider; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddServiceProvider
        {
            public readonly string param = "param";
            public readonly string ServiceId = "ServiceId";
            public readonly string statusCapacity = "statusCapacity";
            public readonly string SendSms = "SendSms";
        }
        static readonly ActionParamsClass_EditServiceProvider s_params_EditServiceProvider = new ActionParamsClass_EditServiceProvider();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditServiceProvider EditServiceProviderParams { get { return s_params_EditServiceProvider; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditServiceProvider
        {
            public readonly string Picture = "Picture";
            public readonly string NationalCard = "NationalCard";
            public readonly string DegreeEducation = "DegreeEducation";
            public readonly string Vocational = "Vocational";
            public readonly string OtherDocuments = "OtherDocuments";
            public readonly string model = "model";
            public readonly string ServiceIdDescs = "ServiceIdDescs";
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_ListServiceProviderLocation s_params_ListServiceProviderLocation = new ActionParamsClass_ListServiceProviderLocation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListServiceProviderLocation ListServiceProviderLocationParams { get { return s_params_ListServiceProviderLocation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListServiceProviderLocation
        {
            public readonly string param = "param";
            public readonly string Sex = "Sex";
            public readonly string ServiceLevelListId = "ServiceLevelListId";
        }
        static readonly ActionParamsClass_CheckMobileUser s_params_CheckMobileUser = new ActionParamsClass_CheckMobileUser();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckMobileUser CheckMobileUserParams { get { return s_params_CheckMobileUser; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckMobileUser
        {
            public readonly string Mobile = "Mobile";
        }
        static readonly ActionParamsClass_LoadEditServiceReciever s_params_LoadEditServiceReciever = new ActionParamsClass_LoadEditServiceReciever();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadEditServiceReciever LoadEditServiceRecieverParams { get { return s_params_LoadEditServiceReciever; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadEditServiceReciever
        {
            public readonly string ServiceProviderId = "ServiceProviderId";
            public readonly string serviceReceiverId = "serviceReceiverId";
        }
        static readonly ActionParamsClass_LoadServiceProviderMaxScore s_params_LoadServiceProviderMaxScore = new ActionParamsClass_LoadServiceProviderMaxScore();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadServiceProviderMaxScore LoadServiceProviderMaxScoreParams { get { return s_params_LoadServiceProviderMaxScore; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadServiceProviderMaxScore
        {
            public readonly string ServiceId = "ServiceId";
            public readonly string LocationId = "LocationId";
            public readonly string ServiceLocationId = "ServiceLocationId";
            public readonly string Sex = "Sex";
            public readonly string ServiceLevelListId = "ServiceLevelListId";
        }
        static readonly ActionParamsClass_CheckHowPerformService s_params_CheckHowPerformService = new ActionParamsClass_CheckHowPerformService();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckHowPerformService CheckHowPerformServiceParams { get { return s_params_CheckHowPerformService; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckHowPerformService
        {
            public readonly string ServiceId = "ServiceId";
            public readonly string HowPerformServices = "HowPerformServices";
        }
        static readonly ActionParamsClass_GetResume s_params_GetResume = new ActionParamsClass_GetResume();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetResume GetResumeParams { get { return s_params_GetResume; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetResume
        {
            public readonly string ServiceProviderId = "ServiceProviderId";
        }
        static readonly ActionParamsClass_UpdateUserServiceLocations s_params_UpdateUserServiceLocations = new ActionParamsClass_UpdateUserServiceLocations();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateUserServiceLocations UpdateUserServiceLocationsParams { get { return s_params_UpdateUserServiceLocations; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateUserServiceLocations
        {
            public readonly string UserServiceLocationId = "UserServiceLocationId";
            public readonly string IsActive = "IsActive";
        }
        static readonly ActionParamsClass_ListServiceLevelPost s_params_ListServiceLevelPost = new ActionParamsClass_ListServiceLevelPost();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListServiceLevelPost ListServiceLevelPostParams { get { return s_params_ListServiceLevelPost; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListServiceLevelPost
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_ShowAllScores s_params_ShowAllScores = new ActionParamsClass_ShowAllScores();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ShowAllScores ShowAllScoresParams { get { return s_params_ShowAllScores; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ShowAllScores
        {
            public readonly string UId = "UId";
        }
        static readonly ActionParamsClass_ShowAllScoreJson s_params_ShowAllScoreJson = new ActionParamsClass_ShowAllScoreJson();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ShowAllScoreJson ShowAllScoreJsonParams { get { return s_params_ShowAllScoreJson; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ShowAllScoreJson
        {
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_ConfirmEmail s_params_ConfirmEmail = new ActionParamsClass_ConfirmEmail();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ConfirmEmail ConfirmEmailParams { get { return s_params_ConfirmEmail; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ConfirmEmail
        {
            public readonly string userId = "userId";
            public readonly string code = "code";
        }
        static readonly ActionParamsClass_ExternalLoginCallback s_params_ExternalLoginCallback = new ActionParamsClass_ExternalLoginCallback();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ExternalLoginCallback ExternalLoginCallbackParams { get { return s_params_ExternalLoginCallback; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ExternalLoginCallback
        {
            public readonly string returnUrl = "returnUrl";
        }
        static readonly ActionParamsClass_ForgotPassword s_params_ForgotPassword = new ActionParamsClass_ForgotPassword();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ForgotPassword ForgotPasswordParams { get { return s_params_ForgotPassword; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ForgotPassword
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_Login s_params_Login = new ActionParamsClass_Login();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Login LoginParams { get { return s_params_Login; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Login
        {
            public readonly string returnUrl = "returnUrl";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_LoginPost s_params_LoginPost = new ActionParamsClass_LoginPost();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoginPost LoginPostParams { get { return s_params_LoginPost; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoginPost
        {
            public readonly string model = "model";
            public readonly string returnUrl = "returnUrl";
        }
        static readonly ActionParamsClass_SendCode s_params_SendCode = new ActionParamsClass_SendCode();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SendCode SendCodeParams { get { return s_params_SendCode; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SendCode
        {
            public readonly string returnUrl = "returnUrl";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_VerifyCode s_params_VerifyCode = new ActionParamsClass_VerifyCode();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_VerifyCode VerifyCodeParams { get { return s_params_VerifyCode; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_VerifyCode
        {
            public readonly string provider = "provider";
            public readonly string returnUrl = "returnUrl";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_ChangePasswords s_params_ChangePasswords = new ActionParamsClass_ChangePasswords();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ChangePasswords ChangePasswordsParams { get { return s_params_ChangePasswords; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ChangePasswords
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_ForgotPasswords s_params_ForgotPasswords = new ActionParamsClass_ForgotPasswords();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ForgotPasswords ForgotPasswordsParams { get { return s_params_ForgotPasswords; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ForgotPasswords
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_ResetPassword s_params_ResetPassword = new ActionParamsClass_ResetPassword();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ResetPassword ResetPasswordParams { get { return s_params_ResetPassword; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ResetPassword
        {
            public readonly string code = "code";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_ChangePasswordAdmin s_params_ChangePasswordAdmin = new ActionParamsClass_ChangePasswordAdmin();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ChangePasswordAdmin ChangePasswordAdminParams { get { return s_params_ChangePasswordAdmin; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ChangePasswordAdmin
        {
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_Register s_params_Register = new ActionParamsClass_Register();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Register RegisterParams { get { return s_params_Register; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Register
        {
            public readonly string Id = "Id";
            public readonly string model = "model";
            public readonly string Type = "Type";
        }
        static readonly ActionParamsClass_CheckPersonnelId s_params_CheckPersonnelId = new ActionParamsClass_CheckPersonnelId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CheckPersonnelId CheckPersonnelIdParams { get { return s_params_CheckPersonnelId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CheckPersonnelId
        {
            public readonly string PersonnelId = "PersonnelId";
        }
        static readonly ActionParamsClass_ListJsonUsers s_params_ListJsonUsers = new ActionParamsClass_ListJsonUsers();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListJsonUsers ListJsonUsersParams { get { return s_params_ListJsonUsers; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListJsonUsers
        {
            public readonly string UserType = "UserType";
            public readonly string RoleId = "RoleId";
        }
        static readonly ActionParamsClass_GetServiceUsers s_params_GetServiceUsers = new ActionParamsClass_GetServiceUsers();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetServiceUsers GetServiceUsersParams { get { return s_params_GetServiceUsers; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetServiceUsers
        {
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_GetUserServiceLocations s_params_GetUserServiceLocations = new ActionParamsClass_GetUserServiceLocations();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetUserServiceLocations GetUserServiceLocationsParams { get { return s_params_GetUserServiceLocations; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetUserServiceLocations
        {
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_UpdateServiceUsers s_params_UpdateServiceUsers = new ActionParamsClass_UpdateServiceUsers();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateServiceUsers UpdateServiceUsersParams { get { return s_params_UpdateServiceUsers; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateServiceUsers
        {
            public readonly string UserServiceId = "UserServiceId";
            public readonly string Score = "Score";
            public readonly string CapacityServiceUser = "CapacityServiceUser";
            public readonly string StatusUserService = "StatusUserService";
            public readonly string Level = "Level";
            public readonly string ServiceLevelListId = "ServiceLevelListId";
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_DeleteSuspension s_params_DeleteSuspension = new ActionParamsClass_DeleteSuspension();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteSuspension DeleteSuspensionParams { get { return s_params_DeleteSuspension; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteSuspension
        {
            public readonly string SuspensionId = "SuspensionId";
        }
        static readonly ActionParamsClass_DeleteUsers s_params_DeleteUsers = new ActionParamsClass_DeleteUsers();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteUsers DeleteUsersParams { get { return s_params_DeleteUsers; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteUsers
        {
            public readonly string UsersId = "UsersId";
        }
        static readonly ActionParamsClass_InactiveUsers s_params_InactiveUsers = new ActionParamsClass_InactiveUsers();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_InactiveUsers InactiveUsersParams { get { return s_params_InactiveUsers; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_InactiveUsers
        {
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_SuspensionUsers s_params_SuspensionUsers = new ActionParamsClass_SuspensionUsers();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SuspensionUsers SuspensionUsersParams { get { return s_params_SuspensionUsers; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SuspensionUsers
        {
            public readonly string UserId = "UserId";
            public readonly string SuspensionDesc = "SuspensionDesc";
            public readonly string FromSuspensionDate = "FromSuspensionDate";
            public readonly string ToSuspensionDate = "ToSuspensionDate";
        }
        static readonly ActionParamsClass_SuspensionList s_params_SuspensionList = new ActionParamsClass_SuspensionList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SuspensionList SuspensionListParams { get { return s_params_SuspensionList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SuspensionList
        {
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_UploadEcxel s_params_UploadEcxel = new ActionParamsClass_UploadEcxel();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UploadEcxel UploadEcxelParams { get { return s_params_UploadEcxel; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UploadEcxel
        {
            public readonly string file = "file";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _ExternalLoginsListPartial = "_ExternalLoginsListPartial";
                public readonly string ChangePassword = "ChangePassword";
                public readonly string ChangePasswordAdmin = "ChangePasswordAdmin";
                public readonly string ConfirmEmail = "ConfirmEmail";
                public readonly string DisplayEmail = "DisplayEmail";
                public readonly string ExternalLoginConfirmation = "ExternalLoginConfirmation";
                public readonly string ExternalLoginFailure = "ExternalLoginFailure";
                public readonly string ForgotPassword = "ForgotPassword";
                public readonly string ForgotPasswordConfirmation = "ForgotPasswordConfirmation";
                public readonly string GetAddEditServiceProvider = "GetAddEditServiceProvider";
                public readonly string GetAddEditServiceProviderInfo = "GetAddEditServiceProviderInfo";
                public readonly string ImportExcelUsers = "ImportExcelUsers";
                public readonly string ListServiceProvider = "ListServiceProvider";
                public readonly string ListServiceReceiver = "ListServiceReceiver";
                public readonly string ListUsers = "ListUsers";
                public readonly string Login_copy = "Login-copy";
                public readonly string Login = "Login";
                public readonly string Register = "Register";
                public readonly string ResetPassword = "ResetPassword";
                public readonly string ResetPasswordConfirmation = "ResetPasswordConfirmation";
                public readonly string SendCode = "SendCode";
                public readonly string ShowAllScores = "ShowAllScores";
                public readonly string VerifyCode = "VerifyCode";
            }
            public readonly string _ExternalLoginsListPartial = "~/Views/Account/_ExternalLoginsListPartial.cshtml";
            public readonly string ChangePassword = "~/Views/Account/ChangePassword.cshtml";
            public readonly string ChangePasswordAdmin = "~/Views/Account/ChangePasswordAdmin.cshtml";
            public readonly string ConfirmEmail = "~/Views/Account/ConfirmEmail.cshtml";
            public readonly string DisplayEmail = "~/Views/Account/DisplayEmail.cshtml";
            public readonly string ExternalLoginConfirmation = "~/Views/Account/ExternalLoginConfirmation.cshtml";
            public readonly string ExternalLoginFailure = "~/Views/Account/ExternalLoginFailure.cshtml";
            public readonly string ForgotPassword = "~/Views/Account/ForgotPassword.cshtml";
            public readonly string ForgotPasswordConfirmation = "~/Views/Account/ForgotPasswordConfirmation.cshtml";
            public readonly string GetAddEditServiceProvider = "~/Views/Account/GetAddEditServiceProvider.cshtml";
            public readonly string GetAddEditServiceProviderInfo = "~/Views/Account/GetAddEditServiceProviderInfo.cshtml";
            public readonly string ImportExcelUsers = "~/Views/Account/ImportExcelUsers.cshtml";
            public readonly string ListServiceProvider = "~/Views/Account/ListServiceProvider.cshtml";
            public readonly string ListServiceReceiver = "~/Views/Account/ListServiceReceiver.cshtml";
            public readonly string ListUsers = "~/Views/Account/ListUsers.cshtml";
            public readonly string Login_copy = "~/Views/Account/Login-copy.cshtml";
            public readonly string Login = "~/Views/Account/Login.cshtml";
            public readonly string Register = "~/Views/Account/Register.cshtml";
            public readonly string ResetPassword = "~/Views/Account/ResetPassword.cshtml";
            public readonly string ResetPasswordConfirmation = "~/Views/Account/ResetPasswordConfirmation.cshtml";
            public readonly string SendCode = "~/Views/Account/SendCode.cshtml";
            public readonly string ShowAllScores = "~/Views/Account/ShowAllScores.cshtml";
            public readonly string VerifyCode = "~/Views/Account/VerifyCode.cshtml";
            static readonly _PartialClass s_Partial = new _PartialClass();
            public _PartialClass Partial { get { return s_Partial; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _PartialClass
            {
                static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
                public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
                public class _ViewNamesClass
                {
                    public readonly string _AddSpecialConditionOfWork = "_AddSpecialConditionOfWork";
                    public readonly string _DecreaseScore = "_DecreaseScore";
                    public readonly string _DeleteUser = "_DeleteUser";
                    public readonly string _DisconnectProvider = "_DisconnectProvider";
                    public readonly string _InactiveUser = "_InactiveUser";
                    public readonly string _ListServiceUsers = "_ListServiceUsers";
                    public readonly string _ListUserServiceLocations = "_ListUserServiceLocations";
                    public readonly string _Login = "_Login";
                    public readonly string _ShowResume = "_ShowResume";
                    public readonly string _SuspensionList = "_SuspensionList";
                    public readonly string _SuspensionUser = "_SuspensionUser";
                }
                public readonly string _AddSpecialConditionOfWork = "~/Views/Account/Partial/_AddSpecialConditionOfWork.cshtml";
                public readonly string _DecreaseScore = "~/Views/Account/Partial/_DecreaseScore.cshtml";
                public readonly string _DeleteUser = "~/Views/Account/Partial/_DeleteUser.cshtml";
                public readonly string _DisconnectProvider = "~/Views/Account/Partial/_DisconnectProvider.cshtml";
                public readonly string _InactiveUser = "~/Views/Account/Partial/_InactiveUser.cshtml";
                public readonly string _ListServiceUsers = "~/Views/Account/Partial/_ListServiceUsers.cshtml";
                public readonly string _ListUserServiceLocations = "~/Views/Account/Partial/_ListUserServiceLocations.cshtml";
                public readonly string _Login = "~/Views/Account/Partial/_Login.cshtml";
                public readonly string _ShowResume = "~/Views/Account/Partial/_ShowResume.cshtml";
                public readonly string _SuspensionList = "~/Views/Account/Partial/_SuspensionList.cshtml";
                public readonly string _SuspensionUser = "~/Views/Account/Partial/_SuspensionUser.cshtml";
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_AccountController : PrivateTraining.Controllers.AccountController
    {
        public T4MVC_AccountController() : base(Dummy.Instance) { }

        [NonAction]
        partial void ListServiceProviderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ListServiceProvider()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ListServiceProvider);
            ListServiceProviderOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ListServiceProviderOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int StateId, int CityId, int LocationId, int ServiceId, int StatusUserServiceLocationId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListServiceProvider(int StateId, int CityId, int LocationId, int ServiceId, int StatusUserServiceLocationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListServiceProvider);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "StateId", StateId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "CityId", CityId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "LocationId", LocationId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceId", ServiceId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "StatusUserServiceLocationId", StatusUserServiceLocationId);
            ListServiceProviderOverride(callInfo, StateId, CityId, LocationId, ServiceId, StatusUserServiceLocationId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void DisconnectProvideresOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int UserId, string Reason, bool Type);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DisconnectProvideres(int UserId, string Reason, bool Type)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DisconnectProvideres);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Reason", Reason);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Type", Type);
            DisconnectProvideresOverride(callInfo, UserId, Reason, Type);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ShowDisconnectReasonsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ShowDisconnectReasons(int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ShowDisconnectReasons);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            ShowDisconnectReasonsOverride(callInfo, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ListServiceReceiverOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ListServiceReceiver()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ListServiceReceiver);
            ListServiceReceiverOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ListServiceReceiverOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int StateId, int CityId, int LocationId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListServiceReceiver(int StateId, int CityId, int LocationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListServiceReceiver);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "StateId", StateId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "CityId", CityId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "LocationId", LocationId);
            ListServiceReceiverOverride(callInfo, StateId, CityId, LocationId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetAddEditServiceProviderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string PmOfZarinPal, string PmerrorOfZarinPal, string OKZarinPal);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetAddEditServiceProvider(string PmOfZarinPal, string PmerrorOfZarinPal, string OKZarinPal)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetAddEditServiceProvider);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PmOfZarinPal", PmOfZarinPal);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PmerrorOfZarinPal", PmerrorOfZarinPal);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OKZarinPal", OKZarinPal);
            GetAddEditServiceProviderOverride(callInfo, PmOfZarinPal, PmerrorOfZarinPal, OKZarinPal);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetAddEditServiceProviderInfoOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetAddEditServiceProviderInfo(int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetAddEditServiceProviderInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            GetAddEditServiceProviderInfoOverride(callInfo, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void LoadEditServiceProviderOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int ServiceReceiverServiceLocationId, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEditServiceProvider(int ServiceReceiverServiceLocationId, int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEditServiceProvider);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceReceiverServiceLocationId", ServiceReceiverServiceLocationId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            LoadEditServiceProviderOverride(callInfo, ServiceReceiverServiceLocationId, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void CheckCapacityServiceProviderForServiceOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int ServiceId, int LocationId);

        [NonAction]
        public override System.Web.Mvc.JsonResult CheckCapacityServiceProviderForService(int ServiceId, int LocationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckCapacityServiceProviderForService);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceId", ServiceId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "LocationId", LocationId);
            CheckCapacityServiceProviderForServiceOverride(callInfo, ServiceId, LocationId);
            return callInfo;
        }

        [NonAction]
        partial void CountCapacityOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int LocationId);

        [NonAction]
        public override System.Web.Mvc.JsonResult CountCapacity(int LocationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CountCapacity);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "LocationId", LocationId);
            CountCapacityOverride(callInfo, LocationId);
            return callInfo;
        }

        [NonAction]
        partial void AddServiceProviderOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.Models.RegisterUserViewModel param, int ServiceId, int statusCapacity, bool SendSms);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddServiceProvider(PrivateTraining.Models.RegisterUserViewModel param, int ServiceId, int statusCapacity, bool SendSms)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddServiceProvider);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceId", ServiceId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "statusCapacity", statusCapacity);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SendSms", SendSms);
            AddServiceProviderOverride(callInfo, param, ServiceId, statusCapacity, SendSms);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void EditServiceProviderOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, System.Collections.Generic.List<System.Web.HttpPostedFileBase> Picture, System.Collections.Generic.List<System.Web.HttpPostedFileBase> NationalCard, System.Collections.Generic.List<System.Web.HttpPostedFileBase> DegreeEducation, System.Collections.Generic.List<System.Web.HttpPostedFileBase> Vocational, System.Collections.Generic.List<System.Web.HttpPostedFileBase> OtherDocuments, string model, string ServiceIdDescs, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditServiceProvider(System.Collections.Generic.List<System.Web.HttpPostedFileBase> Picture, System.Collections.Generic.List<System.Web.HttpPostedFileBase> NationalCard, System.Collections.Generic.List<System.Web.HttpPostedFileBase> DegreeEducation, System.Collections.Generic.List<System.Web.HttpPostedFileBase> Vocational, System.Collections.Generic.List<System.Web.HttpPostedFileBase> OtherDocuments, string model, string ServiceIdDescs, int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditServiceProvider);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Picture", Picture);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "NationalCard", NationalCard);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DegreeEducation", DegreeEducation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Vocational", Vocational);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "OtherDocuments", OtherDocuments);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceIdDescs", ServiceIdDescs);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            EditServiceProviderOverride(callInfo, Picture, NationalCard, DegreeEducation, Vocational, OtherDocuments, model, ServiceIdDescs, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ListServiceProviderLocationOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.Models.RegisterUserViewModel param, int Sex, int ServiceLevelListId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListServiceProviderLocation(PrivateTraining.Models.RegisterUserViewModel param, int Sex, int ServiceLevelListId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListServiceProviderLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Sex", Sex);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceLevelListId", ServiceLevelListId);
            ListServiceProviderLocationOverride(callInfo, param, Sex, ServiceLevelListId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void CheckMobileUserOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string Mobile);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> CheckMobileUser(string Mobile)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckMobileUser);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Mobile", Mobile);
            CheckMobileUserOverride(callInfo, Mobile);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void LoadEditServiceRecieverOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int ServiceProviderId, int serviceReceiverId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEditServiceReciever(int ServiceProviderId, int serviceReceiverId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEditServiceReciever);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceProviderId", ServiceProviderId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "serviceReceiverId", serviceReceiverId);
            LoadEditServiceRecieverOverride(callInfo, ServiceProviderId, serviceReceiverId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void LoadServiceProviderMaxScoreOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int ServiceId, int LocationId, int ServiceLocationId, int Sex, int ServiceLevelListId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadServiceProviderMaxScore(int ServiceId, int LocationId, int ServiceLocationId, int Sex, int ServiceLevelListId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadServiceProviderMaxScore);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceId", ServiceId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "LocationId", LocationId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceLocationId", ServiceLocationId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Sex", Sex);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceLevelListId", ServiceLevelListId);
            LoadServiceProviderMaxScoreOverride(callInfo, ServiceId, LocationId, ServiceLocationId, Sex, ServiceLevelListId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void CheckHowPerformServiceOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int ServiceId, int HowPerformServices);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> CheckHowPerformService(int ServiceId, int HowPerformServices)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckHowPerformService);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceId", ServiceId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "HowPerformServices", HowPerformServices);
            CheckHowPerformServiceOverride(callInfo, ServiceId, HowPerformServices);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetResumeOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int ServiceProviderId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetResume(int ServiceProviderId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetResume);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceProviderId", ServiceProviderId);
            GetResumeOverride(callInfo, ServiceProviderId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void UpdateUserServiceLocationsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int UserServiceLocationId, byte IsActive);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> UpdateUserServiceLocations(int UserServiceLocationId, byte IsActive)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.UpdateUserServiceLocations);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserServiceLocationId", UserServiceLocationId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "IsActive", IsActive);
            UpdateUserServiceLocationsOverride(callInfo, UserServiceLocationId, IsActive);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void CheckLoginServiceReceiverOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> CheckLoginServiceReceiver()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckLoginServiceReceiver);
            CheckLoginServiceReceiverOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ListServiceLevelPostOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int Id);

        [NonAction]
        public override System.Web.Mvc.JsonResult ListServiceLevelPost(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListServiceLevelPost);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            ListServiceLevelPostOverride(callInfo, Id);
            return callInfo;
        }

        [NonAction]
        partial void ShowAllScoresOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int UId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ShowAllScores(int UId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowAllScores);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UId", UId);
            ShowAllScoresOverride(callInfo, UId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ShowAllScoreJsonOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ShowAllScoreJson(int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ShowAllScoreJson);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            ShowAllScoreJsonOverride(callInfo, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ConfirmEmailOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int? userId, string code);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ConfirmEmail(int? userId, string code)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ConfirmEmail);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userId", userId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "code", code);
            ConfirmEmailOverride(callInfo, userId, code);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ExternalLoginCallbackOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string returnUrl);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ExternalLoginCallback(string returnUrl)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ExternalLoginCallback);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "returnUrl", returnUrl);
            ExternalLoginCallbackOverride(callInfo, returnUrl);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ExternalLoginFailureOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ExternalLoginFailure()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ExternalLoginFailure);
            ExternalLoginFailureOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ForgotPasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, PrivateTraining.Models.ForgotPasswordViewModel model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ForgotPassword(PrivateTraining.Models.ForgotPasswordViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ForgotPassword);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            ForgotPasswordOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ForgotPasswordConfirmationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ForgotPasswordConfirmation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ForgotPasswordConfirmation);
            ForgotPasswordConfirmationOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LoginOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string returnUrl);

        [NonAction]
        public override System.Web.Mvc.ActionResult Login(string returnUrl)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Login);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "returnUrl", returnUrl);
            LoginOverride(callInfo, returnUrl);
            return callInfo;
        }

        [NonAction]
        partial void LoginOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, PrivateTraining.Models.LoginViewModel model, string returnUrl);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Login(PrivateTraining.Models.LoginViewModel model, string returnUrl)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Login);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "returnUrl", returnUrl);
            LoginOverride(callInfo, model, returnUrl);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void LoginPostOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, PrivateTraining.Models.LoginViewModel model, string returnUrl);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> LoginPost(PrivateTraining.Models.LoginViewModel model, string returnUrl)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LoginPost);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "returnUrl", returnUrl);
            LoginPostOverride(callInfo, model, returnUrl);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void LogOffOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> LogOff()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.LogOff);
            LogOffOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ResetPasswordConfirmationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ResetPasswordConfirmation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ResetPasswordConfirmation);
            ResetPasswordConfirmationOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void SendCodeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string returnUrl);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SendCode(string returnUrl)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendCode);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "returnUrl", returnUrl);
            SendCodeOverride(callInfo, returnUrl);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SendCodeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, PrivateTraining.Models.SendCodeViewModel model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> SendCode(PrivateTraining.Models.SendCodeViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SendCode);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            SendCodeOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void VerifyCodeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string provider, string returnUrl);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> VerifyCode(string provider, string returnUrl)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.VerifyCode);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "provider", provider);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "returnUrl", returnUrl);
            VerifyCodeOverride(callInfo, provider, returnUrl);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void VerifyCodeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, PrivateTraining.Models.VerifyCodeViewModel model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> VerifyCode(PrivateTraining.Models.VerifyCodeViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.VerifyCode);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            VerifyCodeOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ChangePasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ChangePassword()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangePassword);
            ChangePasswordOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ChangePasswordsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.Models.ChangePasswordViewModel model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ChangePasswords(PrivateTraining.Models.ChangePasswordViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ChangePasswords);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            ChangePasswordsOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ForgotPasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ForgotPassword()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ForgotPassword);
            ForgotPasswordOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ForgotPasswordsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.Models.ForgotPasswordViewModel model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ForgotPasswords(PrivateTraining.Models.ForgotPasswordViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ForgotPasswords);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            ForgotPasswordsOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ResetPasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string code);

        [NonAction]
        public override System.Web.Mvc.ActionResult ResetPassword(string code)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ResetPassword);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "code", code);
            ResetPasswordOverride(callInfo, code);
            return callInfo;
        }

        [NonAction]
        partial void ResetPasswordOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, PrivateTraining.Models.ResetPasswordViewModel model);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ResetPassword(PrivateTraining.Models.ResetPasswordViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ResetPassword);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            ResetPasswordOverride(callInfo, model);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ChangePasswordAdminOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ChangePasswordAdmin(int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangePasswordAdmin);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            ChangePasswordAdminOverride(callInfo, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void RegisterOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int Id);

        [NonAction]
        public override System.Web.Mvc.ActionResult Register(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Register);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            RegisterOverride(callInfo, Id);
            return callInfo;
        }

        [NonAction]
        partial void RegisterOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.Models.RegisterViewModel model, string Type);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> Register(PrivateTraining.Models.RegisterViewModel model, string Type)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Register);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Type", Type);
            RegisterOverride(callInfo, model, Type);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void CheckPersonnelIdOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int PersonnelId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> CheckPersonnelId(int PersonnelId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.CheckPersonnelId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PersonnelId", PersonnelId);
            CheckPersonnelIdOverride(callInfo, PersonnelId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ListUsersOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ListUsers()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ListUsers);
            ListUsersOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ListJsonUsersOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, byte UserType, int RoleId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListJsonUsers(byte UserType, int RoleId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListJsonUsers);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserType", UserType);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RoleId", RoleId);
            ListJsonUsersOverride(callInfo, UserType, RoleId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetServiceUsersOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetServiceUsers(int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetServiceUsers);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            GetServiceUsersOverride(callInfo, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetUserServiceLocationsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetUserServiceLocations(int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetUserServiceLocations);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            GetUserServiceLocationsOverride(callInfo, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void UpdateServiceUsersOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int UserServiceId, int Score, int CapacityServiceUser, int StatusUserService, int Level, int ServiceLevelListId, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> UpdateServiceUsers(int UserServiceId, int Score, int CapacityServiceUser, int StatusUserService, int Level, int ServiceLevelListId, int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.UpdateServiceUsers);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserServiceId", UserServiceId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Score", Score);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "CapacityServiceUser", CapacityServiceUser);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "StatusUserService", StatusUserService);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Level", Level);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceLevelListId", ServiceLevelListId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            UpdateServiceUsersOverride(callInfo, UserServiceId, Score, CapacityServiceUser, StatusUserService, Level, ServiceLevelListId, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void DeleteSuspensionOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int SuspensionId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteSuspension(int SuspensionId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteSuspension);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SuspensionId", SuspensionId);
            DeleteSuspensionOverride(callInfo, SuspensionId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void DeleteUsersOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string[] UsersId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteUsers(string[] UsersId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteUsers);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UsersId", UsersId);
            DeleteUsersOverride(callInfo, UsersId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void InactiveUsersOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> InactiveUsers(int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.InactiveUsers);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            InactiveUsersOverride(callInfo, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void SuspensionUsersOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int UserId, string SuspensionDesc, string FromSuspensionDate, string ToSuspensionDate);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> SuspensionUsers(int UserId, string SuspensionDesc, string FromSuspensionDate, string ToSuspensionDate)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.SuspensionUsers);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SuspensionDesc", SuspensionDesc);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "FromSuspensionDate", FromSuspensionDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ToSuspensionDate", ToSuspensionDate);
            SuspensionUsersOverride(callInfo, UserId, SuspensionDesc, FromSuspensionDate, ToSuspensionDate);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void activateSuspensionOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> activateSuspension()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.activateSuspension);
            activateSuspensionOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void DeactivateSuspensionOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeactivateSuspension()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeactivateSuspension);
            DeactivateSuspensionOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void SuspensionListOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int UserId);

        [NonAction]
        public override System.Web.Mvc.JsonResult SuspensionList(int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.SuspensionList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            SuspensionListOverride(callInfo, UserId);
            return callInfo;
        }

        [NonAction]
        partial void ImportExcelUsersOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ImportExcelUsers()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ImportExcelUsers);
            ImportExcelUsersOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void UploadEcxelOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, System.Collections.Generic.List<System.Web.HttpPostedFileBase> file);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> UploadEcxel(System.Collections.Generic.List<System.Web.HttpPostedFileBase> file)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.UploadEcxel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "file", file);
            UploadEcxelOverride(callInfo, file);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
