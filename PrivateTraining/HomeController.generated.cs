// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace PrivateTraining.Controllers
{
    public partial class HomeController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected HomeController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public HomeController Actions { get { return MVC.Home; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Home";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Home";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string IndexPanel = "IndexPanel";
            public readonly string About = "About";
            public readonly string Contact = "Contact";
            public readonly string SaveContactUs = "SaveContactUs";
            public readonly string AcceptableConditions = "AcceptableConditions";
            public readonly string Procedures = "Procedures";
            public readonly string ShowUserName = "ShowUserName";
            public readonly string CountTasks = "CountTasks";
            public readonly string GetPicUser = "GetPicUser";
            public readonly string Rule = "Rule";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string IndexPanel = "IndexPanel";
            public const string About = "About";
            public const string Contact = "Contact";
            public const string SaveContactUs = "SaveContactUs";
            public const string AcceptableConditions = "AcceptableConditions";
            public const string Procedures = "Procedures";
            public const string ShowUserName = "ShowUserName";
            public const string CountTasks = "CountTasks";
            public const string GetPicUser = "GetPicUser";
            public const string Rule = "Rule";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_IndexPanel s_params_IndexPanel = new ActionParamsClass_IndexPanel();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_IndexPanel IndexPanelParams { get { return s_params_IndexPanel; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_IndexPanel
        {
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_SaveContactUs s_params_SaveContactUs = new ActionParamsClass_SaveContactUs();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SaveContactUs SaveContactUsParams { get { return s_params_SaveContactUs; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SaveContactUs
        {
            public readonly string name = "name";
            public readonly string email = "email";
            public readonly string subject = "subject";
            public readonly string desc = "desc";
        }
        static readonly ActionParamsClass_CountTasks s_params_CountTasks = new ActionParamsClass_CountTasks();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CountTasks CountTasksParams { get { return s_params_CountTasks; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CountTasks
        {
            public readonly string Type = "Type";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string About = "About";
                public readonly string AcceptableConditions = "AcceptableConditions";
                public readonly string Contact = "Contact";
                public readonly string CountTasks = "CountTasks";
                public readonly string GetPicUser = "GetPicUser";
                public readonly string Index___970822 = "Index - 970822";
                public readonly string Index = "Index";
                public readonly string IndexPanel = "IndexPanel";
                public readonly string Procedures = "Procedures";
                public readonly string Rule = "Rule";
                public readonly string ShowUserName = "ShowUserName";
            }
            public readonly string About = "~/Views/Home/About.cshtml";
            public readonly string AcceptableConditions = "~/Views/Home/AcceptableConditions.cshtml";
            public readonly string Contact = "~/Views/Home/Contact.cshtml";
            public readonly string CountTasks = "~/Views/Home/CountTasks.cshtml";
            public readonly string GetPicUser = "~/Views/Home/GetPicUser.cshtml";
            public readonly string Index___970822 = "~/Views/Home/Index - 970822.cshtml";
            public readonly string Index = "~/Views/Home/Index.cshtml";
            public readonly string IndexPanel = "~/Views/Home/IndexPanel.cshtml";
            public readonly string Procedures = "~/Views/Home/Procedures.cshtml";
            public readonly string Rule = "~/Views/Home/Rule.cshtml";
            public readonly string ShowUserName = "~/Views/Home/ShowUserName.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_HomeController : PrivateTraining.Controllers.HomeController
    {
        public T4MVC_HomeController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Index(int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            IndexOverride(callInfo, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void IndexPanelOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> IndexPanel(int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.IndexPanel);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            IndexPanelOverride(callInfo, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AboutOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> About()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.About);
            AboutOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ContactOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Contact()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Contact);
            ContactOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void SaveContactUsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string name, string email, string subject, string desc);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> SaveContactUs(string name, string email, string subject, string desc)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.SaveContactUs);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "name", name);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "email", email);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "subject", subject);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "desc", desc);
            SaveContactUsOverride(callInfo, name, email, subject, desc);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void AcceptableConditionsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult AcceptableConditions()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AcceptableConditions);
            AcceptableConditionsOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ProceduresOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Procedures()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Procedures);
            ProceduresOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ShowUserNameOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ShowUserName()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowUserName);
            ShowUserNameOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void CountTasksOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, byte Type);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> CountTasks(byte Type)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CountTasks);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Type", Type);
            CountTasksOverride(callInfo, Type);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetPicUserOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult GetPicUser()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetPicUser);
            GetPicUserOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void RuleOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Rule()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Rule);
            RuleOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
