// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace PrivateTraining.Areas.PrivateTrain.Controllers
{
    public partial class ServiceReceiverServiceLocationController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ServiceReceiverServiceLocationController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ChangeStatusRequest()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangeStatusRequest);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> RefrenceServiceReceiverServiceLocations()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RefrenceServiceReceiverServiceLocations);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ShowProblem()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowProblem);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddComment()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddComment);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ServiceReceiverServiceLocationController Actions { get { return MVC.PrivateTrain.ServiceReceiverServiceLocation; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "PrivateTrain";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "ServiceReceiverServiceLocation";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "ServiceReceiverServiceLocation";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string ServicesServiceProvider = "ServicesServiceProvider";
            public readonly string NewServicesServiceProvider = "NewServicesServiceProvider";
            public readonly string CertainServiceServiceProvider = "CertainServiceServiceProvider";
            public readonly string FinishedServicesServiceProvider = "FinishedServicesServiceProvider";
            public readonly string ListServicesServiceProvider = "ListServicesServiceProvider";
            public readonly string ChangeStatusRequest = "ChangeStatusRequest";
            public readonly string RefrenceServiceReceiverServiceLocations = "RefrenceServiceReceiverServiceLocations";
            public readonly string ServicesServiceReceiver = "ServicesServiceReceiver";
            public readonly string ListServicesServiceReceiver = "ListServicesServiceReceiver";
            public readonly string ListSRSLserviceReceiver = "ListSRSLserviceReceiver";
            public readonly string ServicesNonAutomation = "ServicesNonAutomation";
            public readonly string ServicesNonAutomationAndCertain = "ServicesNonAutomationAndCertain";
            public readonly string ServicesAutomation = "ServicesAutomation";
            public readonly string ListServiceReceiverServiceLocations = "ListServiceReceiverServiceLocations";
            public readonly string ShowProblem = "ShowProblem";
            public readonly string LoadSRSL = "LoadSRSL";
            public readonly string AddComment = "AddComment";
            public readonly string loadComment = "loadComment";
            public readonly string loadCommentByUserIdANDServiceId = "loadCommentByUserIdANDServiceId";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string ServicesServiceProvider = "ServicesServiceProvider";
            public const string NewServicesServiceProvider = "NewServicesServiceProvider";
            public const string CertainServiceServiceProvider = "CertainServiceServiceProvider";
            public const string FinishedServicesServiceProvider = "FinishedServicesServiceProvider";
            public const string ListServicesServiceProvider = "ListServicesServiceProvider";
            public const string ChangeStatusRequest = "ChangeStatusRequest";
            public const string RefrenceServiceReceiverServiceLocations = "RefrenceServiceReceiverServiceLocations";
            public const string ServicesServiceReceiver = "ServicesServiceReceiver";
            public const string ListServicesServiceReceiver = "ListServicesServiceReceiver";
            public const string ListSRSLserviceReceiver = "ListSRSLserviceReceiver";
            public const string ServicesNonAutomation = "ServicesNonAutomation";
            public const string ServicesNonAutomationAndCertain = "ServicesNonAutomationAndCertain";
            public const string ServicesAutomation = "ServicesAutomation";
            public const string ListServiceReceiverServiceLocations = "ListServiceReceiverServiceLocations";
            public const string ShowProblem = "ShowProblem";
            public const string LoadSRSL = "LoadSRSL";
            public const string AddComment = "AddComment";
            public const string loadComment = "loadComment";
            public const string loadCommentByUserIdANDServiceId = "loadCommentByUserIdANDServiceId";
        }


        static readonly ActionParamsClass_ListServicesServiceProvider s_params_ListServicesServiceProvider = new ActionParamsClass_ListServicesServiceProvider();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListServicesServiceProvider ListServicesServiceProviderParams { get { return s_params_ListServicesServiceProvider; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListServicesServiceProvider
        {
            public readonly string Status = "Status";
        }
        static readonly ActionParamsClass_ChangeStatusRequest s_params_ChangeStatusRequest = new ActionParamsClass_ChangeStatusRequest();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ChangeStatusRequest ChangeStatusRequestParams { get { return s_params_ChangeStatusRequest; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ChangeStatusRequest
        {
            public readonly string Status = "Status";
            public readonly string ServiceReceiverServiceLocationId = "ServiceReceiverServiceLocationId";
            public readonly string RequestId = "RequestId";
            public readonly string WorkUnitId = "WorkUnitId";
            public readonly string ReasonCancel = "ReasonCancel";
        }
        static readonly ActionParamsClass_RefrenceServiceReceiverServiceLocations s_params_RefrenceServiceReceiverServiceLocations = new ActionParamsClass_RefrenceServiceReceiverServiceLocations();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RefrenceServiceReceiverServiceLocations RefrenceServiceReceiverServiceLocationsParams { get { return s_params_RefrenceServiceReceiverServiceLocations; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RefrenceServiceReceiverServiceLocations
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_ListServicesServiceReceiver s_params_ListServicesServiceReceiver = new ActionParamsClass_ListServicesServiceReceiver();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListServicesServiceReceiver ListServicesServiceReceiverParams { get { return s_params_ListServicesServiceReceiver; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListServicesServiceReceiver
        {
            public readonly string Status = "Status";
        }
        static readonly ActionParamsClass_ListSRSLserviceReceiver s_params_ListSRSLserviceReceiver = new ActionParamsClass_ListSRSLserviceReceiver();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListSRSLserviceReceiver ListSRSLserviceReceiverParams { get { return s_params_ListSRSLserviceReceiver; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListSRSLserviceReceiver
        {
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_ListServiceReceiverServiceLocations s_params_ListServiceReceiverServiceLocations = new ActionParamsClass_ListServiceReceiverServiceLocations();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListServiceReceiverServiceLocations ListServiceReceiverServiceLocationsParams { get { return s_params_ListServiceReceiverServiceLocations; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListServiceReceiverServiceLocations
        {
            public readonly string Status = "Status";
            public readonly string Automation = "Automation";
        }
        static readonly ActionParamsClass_ShowProblem s_params_ShowProblem = new ActionParamsClass_ShowProblem();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ShowProblem ShowProblemParams { get { return s_params_ShowProblem; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ShowProblem
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_LoadSRSL s_params_LoadSRSL = new ActionParamsClass_LoadSRSL();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadSRSL LoadSRSLParams { get { return s_params_LoadSRSL; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadSRSL
        {
            public readonly string ServiceReceiverServiceLocationId = "ServiceReceiverServiceLocationId";
        }
        static readonly ActionParamsClass_AddComment s_params_AddComment = new ActionParamsClass_AddComment();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddComment AddCommentParams { get { return s_params_AddComment; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddComment
        {
            public readonly string Comment = "Comment";
            public readonly string ServiceReceiverServiceLocationId = "ServiceReceiverServiceLocationId";
        }
        static readonly ActionParamsClass_loadComment s_params_loadComment = new ActionParamsClass_loadComment();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_loadComment loadCommentParams { get { return s_params_loadComment; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_loadComment
        {
            public readonly string ServiceReceiverServiceLocationId = "ServiceReceiverServiceLocationId";
        }
        static readonly ActionParamsClass_loadCommentByUserIdANDServiceId s_params_loadCommentByUserIdANDServiceId = new ActionParamsClass_loadCommentByUserIdANDServiceId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_loadCommentByUserIdANDServiceId loadCommentByUserIdANDServiceIdParams { get { return s_params_loadCommentByUserIdANDServiceId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_loadCommentByUserIdANDServiceId
        {
            public readonly string UserId = "UserId";
            public readonly string ServiceId = "ServiceId";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _AddServiceReceiverServiceLocationTime = "_AddServiceReceiverServiceLocationTime";
                public readonly string _InformationServiceReceiver = "_InformationServiceReceiver";
                public readonly string _ListServiceRecieveServiceLocation = "_ListServiceRecieveServiceLocation";
                public readonly string _ListServiceRequests = "_ListServiceRequests";
                public readonly string _ReasonCancel = "_ReasonCancel";
                public readonly string _SelectWorkUnit = "_SelectWorkUnit";
                public readonly string CertainServiceServiceProvider = "CertainServiceServiceProvider";
                public readonly string FinishedServicesServiceProvider = "FinishedServicesServiceProvider";
                public readonly string ListServiceProviderServiceLocation = "ListServiceProviderServiceLocation";
                public readonly string NewServicesServiceProvider = "NewServicesServiceProvider";
                public readonly string ServicesAutomation = "ServicesAutomation";
                public readonly string ServicesNonAutomation = "ServicesNonAutomation";
                public readonly string ServicesNonAutomationAndCertain = "ServicesNonAutomationAndCertain";
                public readonly string ServicesServiceProvider = "ServicesServiceProvider";
                public readonly string ServicesServiceReceiver = "ServicesServiceReceiver";
            }
            public readonly string _AddServiceReceiverServiceLocationTime = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/_AddServiceReceiverServiceLocationTime.cshtml";
            public readonly string _InformationServiceReceiver = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/_InformationServiceReceiver.cshtml";
            public readonly string _ListServiceRecieveServiceLocation = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/_ListServiceRecieveServiceLocation.cshtml";
            public readonly string _ListServiceRequests = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/_ListServiceRequests.cshtml";
            public readonly string _ReasonCancel = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/_ReasonCancel.cshtml";
            public readonly string _SelectWorkUnit = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/_SelectWorkUnit.cshtml";
            public readonly string CertainServiceServiceProvider = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/CertainServiceServiceProvider.cshtml";
            public readonly string FinishedServicesServiceProvider = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/FinishedServicesServiceProvider.cshtml";
            public readonly string ListServiceProviderServiceLocation = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/ListServiceProviderServiceLocation.cshtml";
            public readonly string NewServicesServiceProvider = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/NewServicesServiceProvider.cshtml";
            public readonly string ServicesAutomation = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/ServicesAutomation.cshtml";
            public readonly string ServicesNonAutomation = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/ServicesNonAutomation.cshtml";
            public readonly string ServicesNonAutomationAndCertain = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/ServicesNonAutomationAndCertain.cshtml";
            public readonly string ServicesServiceProvider = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/ServicesServiceProvider.cshtml";
            public readonly string ServicesServiceReceiver = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/ServicesServiceReceiver.cshtml";
            static readonly _PartialClass s_Partial = new _PartialClass();
            public _PartialClass Partial { get { return s_Partial; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _PartialClass
            {
                static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
                public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
                public class _ViewNamesClass
                {
                    public readonly string _AddComment = "_AddComment";
                    public readonly string _Description = "_Description";
                    public readonly string _Problem = "_Problem";
                    public readonly string _ShowFormAssessment = "_ShowFormAssessment";
                }
                public readonly string _AddComment = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/Partial/_AddComment.cshtml";
                public readonly string _Description = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/Partial/_Description.cshtml";
                public readonly string _Problem = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/Partial/_Problem.cshtml";
                public readonly string _ShowFormAssessment = "~/Areas/PrivateTrain/Views/ServiceReceiverServiceLocation/Partial/_ShowFormAssessment.cshtml";
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ServiceReceiverServiceLocationController : PrivateTraining.Areas.PrivateTrain.Controllers.ServiceReceiverServiceLocationController
    {
        public T4MVC_ServiceReceiverServiceLocationController() : base(Dummy.Instance) { }

        [NonAction]
        partial void ServicesServiceProviderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ServicesServiceProvider()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ServicesServiceProvider);
            ServicesServiceProviderOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void NewServicesServiceProviderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> NewServicesServiceProvider()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.NewServicesServiceProvider);
            NewServicesServiceProviderOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void CertainServiceServiceProviderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> CertainServiceServiceProvider()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CertainServiceServiceProvider);
            CertainServiceServiceProviderOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void FinishedServicesServiceProviderOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> FinishedServicesServiceProvider()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.FinishedServicesServiceProvider);
            FinishedServicesServiceProviderOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ListServicesServiceProviderOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int Status);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListServicesServiceProvider(int Status)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListServicesServiceProvider);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Status", Status);
            ListServicesServiceProviderOverride(callInfo, Status);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ChangeStatusRequestOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, byte Status, int ServiceReceiverServiceLocationId, int RequestId, int WorkUnitId, string ReasonCancel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ChangeStatusRequest(byte Status, int ServiceReceiverServiceLocationId, int RequestId, int WorkUnitId, string ReasonCancel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ChangeStatusRequest);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Status", Status);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceReceiverServiceLocationId", ServiceReceiverServiceLocationId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RequestId", RequestId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "WorkUnitId", WorkUnitId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ReasonCancel", ReasonCancel);
            ChangeStatusRequestOverride(callInfo, Status, ServiceReceiverServiceLocationId, RequestId, WorkUnitId, ReasonCancel);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void RefrenceServiceReceiverServiceLocationsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int Id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> RefrenceServiceReceiverServiceLocations(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RefrenceServiceReceiverServiceLocations);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            RefrenceServiceReceiverServiceLocationsOverride(callInfo, Id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ServicesServiceReceiverOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ServicesServiceReceiver()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ServicesServiceReceiver);
            ServicesServiceReceiverOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ListServicesServiceReceiverOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int Status);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListServicesServiceReceiver(int Status)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListServicesServiceReceiver);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Status", Status);
            ListServicesServiceReceiverOverride(callInfo, Status);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ListSRSLserviceReceiverOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListSRSLserviceReceiver(int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListSRSLserviceReceiver);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            ListSRSLserviceReceiverOverride(callInfo, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ServicesNonAutomationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ServicesNonAutomation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ServicesNonAutomation);
            ServicesNonAutomationOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ServicesNonAutomationAndCertainOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ServicesNonAutomationAndCertain()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ServicesNonAutomationAndCertain);
            ServicesNonAutomationAndCertainOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ServicesAutomationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ServicesAutomation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ServicesAutomation);
            ServicesAutomationOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ListServiceReceiverServiceLocationsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int Status, bool Automation);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListServiceReceiverServiceLocations(int Status, bool Automation)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListServiceReceiverServiceLocations);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Status", Status);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Automation", Automation);
            ListServiceReceiverServiceLocationsOverride(callInfo, Status, Automation);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ShowProblemOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int Id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ShowProblem(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowProblem);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            ShowProblemOverride(callInfo, Id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void LoadSRSLOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int ServiceReceiverServiceLocationId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadSRSL(int ServiceReceiverServiceLocationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadSRSL);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceReceiverServiceLocationId", ServiceReceiverServiceLocationId);
            LoadSRSLOverride(callInfo, ServiceReceiverServiceLocationId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void AddCommentOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.PrivateTraining.CommentPrivate Comment, int ServiceReceiverServiceLocationId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddComment(PrivateTraining.DomainClasses.Entities.PrivateTraining.CommentPrivate Comment, int ServiceReceiverServiceLocationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddComment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Comment", Comment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceReceiverServiceLocationId", ServiceReceiverServiceLocationId);
            AddCommentOverride(callInfo, Comment, ServiceReceiverServiceLocationId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void loadCommentOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int ServiceReceiverServiceLocationId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> loadComment(int ServiceReceiverServiceLocationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.loadComment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceReceiverServiceLocationId", ServiceReceiverServiceLocationId);
            loadCommentOverride(callInfo, ServiceReceiverServiceLocationId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void loadCommentByUserIdANDServiceIdOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int UserId, int ServiceId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> loadCommentByUserIdANDServiceId(int UserId, int ServiceId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.loadCommentByUserIdANDServiceId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceId", ServiceId);
            loadCommentByUserIdANDServiceIdOverride(callInfo, UserId, ServiceId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
