// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace PrivateTraining.Areas.PrivateTrain.Controllers
{
    public partial class ServicePropertiesController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ServicePropertiesController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetServicePropertiesList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetServicePropertiesList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddServiceProperties()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddServiceProperties);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteServiceProperties()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteServiceProperties);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> serviceProperties()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.serviceProperties);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ServiceProperty()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ServiceProperty);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditServiceExtraProperties()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditServiceExtraProperties);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditServiceProperties()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditServiceProperties);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListSubServiceProperties()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListSubServiceProperties);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEdit()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEdit);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadParentServiceProperties()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadParentServiceProperties);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ViewfullServiceProperties()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ViewfullServiceProperties);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ReturnParents()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ReturnParents);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ServicePropertiesController Actions { get { return MVC.PrivateTrain.ServiceProperties; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "PrivateTrain";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "ServiceProperties";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "ServiceProperties";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string GetServicePropertiesList = "GetServicePropertiesList";
            public readonly string AddServiceProperties = "AddServiceProperties";
            public readonly string DeleteServiceProperties = "DeleteServiceProperties";
            public readonly string serviceProperties = "serviceProperties";
            public readonly string ServiceProperty = "ServiceProperty";
            public readonly string EditServiceExtraProperties = "EditServiceExtraProperties";
            public readonly string EditServiceProperties = "EditServiceProperties";
            public readonly string ListSubServiceProperties = "ListSubServiceProperties";
            public readonly string LoadEdit = "LoadEdit";
            public readonly string LoadParentServiceProperties = "LoadParentServiceProperties";
            public readonly string ViewfullServiceProperties = "ViewfullServiceProperties";
            public readonly string LoadWorkUnit = "LoadWorkUnit";
            public readonly string GetServiceList = "GetServiceList";
            public readonly string ReturnParents = "ReturnParents";
            public readonly string LoadServiceWorkUnit = "LoadServiceWorkUnit";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string GetServicePropertiesList = "GetServicePropertiesList";
            public const string AddServiceProperties = "AddServiceProperties";
            public const string DeleteServiceProperties = "DeleteServiceProperties";
            public const string serviceProperties = "serviceProperties";
            public const string ServiceProperty = "ServiceProperty";
            public const string EditServiceExtraProperties = "EditServiceExtraProperties";
            public const string EditServiceProperties = "EditServiceProperties";
            public const string ListSubServiceProperties = "ListSubServiceProperties";
            public const string LoadEdit = "LoadEdit";
            public const string LoadParentServiceProperties = "LoadParentServiceProperties";
            public const string ViewfullServiceProperties = "ViewfullServiceProperties";
            public const string LoadWorkUnit = "LoadWorkUnit";
            public const string GetServiceList = "GetServiceList";
            public const string ReturnParents = "ReturnParents";
            public const string LoadServiceWorkUnit = "LoadServiceWorkUnit";
        }


        static readonly ActionParamsClass_GetServicePropertiesList s_params_GetServicePropertiesList = new ActionParamsClass_GetServicePropertiesList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetServicePropertiesList GetServicePropertiesListParams { get { return s_params_GetServicePropertiesList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetServicePropertiesList
        {
            public readonly string param = "param";
        }
        static readonly ActionParamsClass_AddServiceProperties s_params_AddServiceProperties = new ActionParamsClass_AddServiceProperties();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddServiceProperties AddServicePropertiesParams { get { return s_params_AddServiceProperties; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddServiceProperties
        {
            public readonly string param = "param";
            public readonly string Workunits = "Workunits";
            public readonly string PriceWorkUnits = "PriceWorkUnits";
            public readonly string ServiceLavels = "ServiceLavels";
            public readonly string PercentServiceLevel = "PercentServiceLevel";
        }
        static readonly ActionParamsClass_DeleteServiceProperties s_params_DeleteServiceProperties = new ActionParamsClass_DeleteServiceProperties();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteServiceProperties DeleteServicePropertiesParams { get { return s_params_DeleteServiceProperties; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteServiceProperties
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_serviceProperties s_params_serviceProperties = new ActionParamsClass_serviceProperties();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_serviceProperties servicePropertiesParams { get { return s_params_serviceProperties; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_serviceProperties
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_ServiceProperty s_params_ServiceProperty = new ActionParamsClass_ServiceProperty();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ServiceProperty ServicePropertyParams { get { return s_params_ServiceProperty; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ServiceProperty
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_EditServiceExtraProperties s_params_EditServiceExtraProperties = new ActionParamsClass_EditServiceExtraProperties();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditServiceExtraProperties EditServiceExtraPropertiesParams { get { return s_params_EditServiceExtraProperties; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditServiceExtraProperties
        {
            public readonly string editService = "editService";
            public readonly string childService = "childService";
        }
        static readonly ActionParamsClass_EditServiceProperties s_params_EditServiceProperties = new ActionParamsClass_EditServiceProperties();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditServiceProperties EditServicePropertiesParams { get { return s_params_EditServiceProperties; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditServiceProperties
        {
            public readonly string param = "param";
            public readonly string Workunits = "Workunits";
            public readonly string PriceWorkUnits = "PriceWorkUnits";
            public readonly string ServiceLavels = "ServiceLavels";
            public readonly string PercentServiceLevel = "PercentServiceLevel";
        }
        static readonly ActionParamsClass_ListSubServiceProperties s_params_ListSubServiceProperties = new ActionParamsClass_ListSubServiceProperties();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListSubServiceProperties ListSubServicePropertiesParams { get { return s_params_ListSubServiceProperties; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListSubServiceProperties
        {
            public readonly string ServicePropertiesId = "ServicePropertiesId";
            public readonly string DefaultId = "DefaultId";
        }
        static readonly ActionParamsClass_LoadEdit s_params_LoadEdit = new ActionParamsClass_LoadEdit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadEdit LoadEditParams { get { return s_params_LoadEdit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadEdit
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_LoadParentServiceProperties s_params_LoadParentServiceProperties = new ActionParamsClass_LoadParentServiceProperties();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadParentServiceProperties LoadParentServicePropertiesParams { get { return s_params_LoadParentServiceProperties; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadParentServiceProperties
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_ViewfullServiceProperties s_params_ViewfullServiceProperties = new ActionParamsClass_ViewfullServiceProperties();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ViewfullServiceProperties ViewfullServicePropertiesParams { get { return s_params_ViewfullServiceProperties; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ViewfullServiceProperties
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_ReturnParents s_params_ReturnParents = new ActionParamsClass_ReturnParents();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ReturnParents ReturnParentsParams { get { return s_params_ReturnParents; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ReturnParents
        {
            public readonly string Services = "Services";
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_LoadServiceWorkUnit s_params_LoadServiceWorkUnit = new ActionParamsClass_LoadServiceWorkUnit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadServiceWorkUnit LoadServiceWorkUnitParams { get { return s_params_LoadServiceWorkUnit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadServiceWorkUnit
        {
            public readonly string ServiceReceiverServiceLocationId = "ServiceReceiverServiceLocationId";
            public readonly string ServiceId = "ServiceId";
            public readonly string LocationId = "LocationId";
            public readonly string ServiceLevelListId = "ServiceLevelListId";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _AddEditServiceProperties = "_AddEditServiceProperties";
                public readonly string _Delete = "_Delete";
                public readonly string _EditPropertiesChildren = "_EditPropertiesChildren";
                public readonly string Index = "Index";
                public readonly string ViewfullServiceProperties = "ViewfullServiceProperties";
            }
            public readonly string _AddEditServiceProperties = "~/Areas/PrivateTrain/Views/ServiceProperties/_AddEditServiceProperties.cshtml";
            public readonly string _Delete = "~/Areas/PrivateTrain/Views/ServiceProperties/_Delete.cshtml";
            public readonly string _EditPropertiesChildren = "~/Areas/PrivateTrain/Views/ServiceProperties/_EditPropertiesChildren.cshtml";
            public readonly string Index = "~/Areas/PrivateTrain/Views/ServiceProperties/Index.cshtml";
            public readonly string ViewfullServiceProperties = "~/Areas/PrivateTrain/Views/ServiceProperties/ViewfullServiceProperties.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ServicePropertiesController : PrivateTraining.Areas.PrivateTrain.Controllers.ServicePropertiesController
    {
        public T4MVC_ServicePropertiesController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetServicePropertiesListOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceProperties param);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetServicePropertiesList(PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceProperties param)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetServicePropertiesList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            GetServicePropertiesListOverride(callInfo, param);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void AddServicePropertiesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceProperties param, System.Collections.Generic.List<int> Workunits, System.Collections.Generic.List<int> PriceWorkUnits, System.Collections.Generic.List<int> ServiceLavels, System.Collections.Generic.List<int> PercentServiceLevel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddServiceProperties(PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceProperties param, System.Collections.Generic.List<int> Workunits, System.Collections.Generic.List<int> PriceWorkUnits, System.Collections.Generic.List<int> ServiceLavels, System.Collections.Generic.List<int> PercentServiceLevel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddServiceProperties);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Workunits", Workunits);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PriceWorkUnits", PriceWorkUnits);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceLavels", ServiceLavels);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PercentServiceLevel", PercentServiceLevel);
            AddServicePropertiesOverride(callInfo, param, Workunits, PriceWorkUnits, ServiceLavels, PercentServiceLevel);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void DeleteServicePropertiesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string Id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteServiceProperties(string Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteServiceProperties);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            DeleteServicePropertiesOverride(callInfo, Id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void servicePropertiesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int Id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> serviceProperties(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.serviceProperties);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            servicePropertiesOverride(callInfo, Id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ServicePropertyOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ServiceProperty(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ServiceProperty);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ServicePropertyOverride(callInfo, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void EditServiceExtraPropertiesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceProperties editService, string childService);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditServiceExtraProperties(PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceProperties editService, string childService)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditServiceExtraProperties);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "editService", editService);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "childService", childService);
            EditServiceExtraPropertiesOverride(callInfo, editService, childService);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void EditServicePropertiesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceProperties param, System.Collections.Generic.List<int> Workunits, System.Collections.Generic.List<int> PriceWorkUnits, System.Collections.Generic.List<int> ServiceLavels, System.Collections.Generic.List<int> PercentServiceLevel);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditServiceProperties(PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceProperties param, System.Collections.Generic.List<int> Workunits, System.Collections.Generic.List<int> PriceWorkUnits, System.Collections.Generic.List<int> ServiceLavels, System.Collections.Generic.List<int> PercentServiceLevel)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditServiceProperties);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Workunits", Workunits);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PriceWorkUnits", PriceWorkUnits);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceLavels", ServiceLavels);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PercentServiceLevel", PercentServiceLevel);
            EditServicePropertiesOverride(callInfo, param, Workunits, PriceWorkUnits, ServiceLavels, PercentServiceLevel);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ListSubServicePropertiesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int ServicePropertiesId, int DefaultId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListSubServiceProperties(int ServicePropertiesId, int DefaultId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListSubServiceProperties);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServicePropertiesId", ServicePropertiesId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DefaultId", DefaultId);
            ListSubServicePropertiesOverride(callInfo, ServicePropertiesId, DefaultId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void LoadEditOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int Id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEdit(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEdit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            LoadEditOverride(callInfo, Id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void LoadParentServicePropertiesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int Id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadParentServiceProperties(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadParentServiceProperties);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            LoadParentServicePropertiesOverride(callInfo, Id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ViewfullServicePropertiesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int Id);

        [NonAction]
        public override System.Web.Mvc.ActionResult ViewfullServiceProperties(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ViewfullServiceProperties);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            ViewfullServicePropertiesOverride(callInfo, Id);
            return callInfo;
        }

        [NonAction]
        partial void LoadWorkUnitOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadWorkUnit()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadWorkUnit);
            LoadWorkUnitOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetServiceListOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetServiceList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetServiceList);
            GetServiceListOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ReturnParentsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int[] Services, int UserId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ReturnParents(int[] Services, int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ReturnParents);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Services", Services);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            ReturnParentsOverride(callInfo, Services, UserId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void LoadServiceWorkUnitOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int ServiceReceiverServiceLocationId, int ServiceId, int LocationId, int ServiceLevelListId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadServiceWorkUnit(int ServiceReceiverServiceLocationId, int ServiceId, int LocationId, int ServiceLevelListId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadServiceWorkUnit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceReceiverServiceLocationId", ServiceReceiverServiceLocationId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceId", ServiceId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "LocationId", LocationId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceLevelListId", ServiceLevelListId);
            LoadServiceWorkUnitOverride(callInfo, ServiceReceiverServiceLocationId, ServiceId, LocationId, ServiceLevelListId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
