// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace PrivateTraining.Controllers
{
    public partial class PrivateTrainingController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected PrivateTrainingController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ApproveServices()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveServices);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddApproveServices()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddApproveServices);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditApproveServices()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditApproveServices);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult LoadForm()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadForm);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AnswerFormAssessment()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AnswerFormAssessment);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PrivateTrainingController Actions { get { return MVC.PrivateTraining; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "PrivateTraining";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "PrivateTraining";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string MenuList = "MenuList";
            public readonly string ListServiceMenus = "ListServiceMenus";
            public readonly string Index = "Index";
            public readonly string ApproveServices = "ApproveServices";
            public readonly string ApproveServicesGetinformationServiceReceivers = "ApproveServicesGetinformationServiceReceivers";
            public readonly string GetApproveServiceInfo = "GetApproveServiceInfo";
            public readonly string AddApproveServices = "AddApproveServices";
            public readonly string EditApproveServices = "EditApproveServices";
            public readonly string LoadForm = "LoadForm";
            public readonly string AnswerFormAssessment = "AnswerFormAssessment";
            public readonly string Setting = "Setting";
            public readonly string SaveSettings = "SaveSettings";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string MenuList = "MenuList";
            public const string ListServiceMenus = "ListServiceMenus";
            public const string Index = "Index";
            public const string ApproveServices = "ApproveServices";
            public const string ApproveServicesGetinformationServiceReceivers = "ApproveServicesGetinformationServiceReceivers";
            public const string GetApproveServiceInfo = "GetApproveServiceInfo";
            public const string AddApproveServices = "AddApproveServices";
            public const string EditApproveServices = "EditApproveServices";
            public const string LoadForm = "LoadForm";
            public const string AnswerFormAssessment = "AnswerFormAssessment";
            public const string Setting = "Setting";
            public const string SaveSettings = "SaveSettings";
        }


        static readonly ActionParamsClass_ApproveServices s_params_ApproveServices = new ActionParamsClass_ApproveServices();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ApproveServices ApproveServicesParams { get { return s_params_ApproveServices; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ApproveServices
        {
            public readonly string ServiceReceiverServiceLocationId = "ServiceReceiverServiceLocationId";
        }
        static readonly ActionParamsClass_GetApproveServiceInfo s_params_GetApproveServiceInfo = new ActionParamsClass_GetApproveServiceInfo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetApproveServiceInfo GetApproveServiceInfoParams { get { return s_params_GetApproveServiceInfo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetApproveServiceInfo
        {
            public readonly string StateId = "StateId";
            public readonly string CityId = "CityId";
            public readonly string LocationId = "LocationId";
            public readonly string ServiceProviderAndServices = "ServiceProviderAndServices";
            public readonly string ServiceReceiverServiceLocationId = "ServiceReceiverServiceLocationId";
        }
        static readonly ActionParamsClass_AddApproveServices s_params_AddApproveServices = new ActionParamsClass_AddApproveServices();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddApproveServices AddApproveServicesParams { get { return s_params_AddApproveServices; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddApproveServices
        {
            public readonly string approve = "approve";
        }
        static readonly ActionParamsClass_EditApproveServices s_params_EditApproveServices = new ActionParamsClass_EditApproveServices();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditApproveServices EditApproveServicesParams { get { return s_params_EditApproveServices; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditApproveServices
        {
            public readonly string param = "param";
        }
        static readonly ActionParamsClass_LoadForm s_params_LoadForm = new ActionParamsClass_LoadForm();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadForm LoadFormParams { get { return s_params_LoadForm; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadForm
        {
            public readonly string FormId = "FormId";
        }
        static readonly ActionParamsClass_AnswerFormAssessment s_params_AnswerFormAssessment = new ActionParamsClass_AnswerFormAssessment();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AnswerFormAssessment AnswerFormAssessmentParams { get { return s_params_AnswerFormAssessment; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AnswerFormAssessment
        {
            public readonly string AnswerFormAssessment = "AnswerFormAssessment";
            public readonly string SRSLId = "SRSLId";
            public readonly string FormId = "FormId";
        }
        static readonly ActionParamsClass_SaveSettings s_params_SaveSettings = new ActionParamsClass_SaveSettings();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SaveSettings SaveSettingsParams { get { return s_params_SaveSettings; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SaveSettings
        {
            public readonly string ShowPayOnline = "ShowPayOnline";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _CheckLogin = "_CheckLogin";
                public readonly string _ListComment = "_ListComment";
                public readonly string _ListServiceProvider = "_ListServiceProvider";
                public readonly string _SelectWorkUnit = "_SelectWorkUnit";
                public readonly string _ShowListPriceWorkUnit = "_ShowListPriceWorkUnit";
                public readonly string ApproveServices = "ApproveServices";
                public readonly string ApproveServices_new = "ApproveServices_new";
                public readonly string ApproveServices_v2 = "ApproveServices_v2";
                public readonly string ApproveServicesGetinformationServiceReceivers = "ApproveServicesGetinformationServiceReceivers";
                public readonly string Index = "Index";
                public readonly string Index2 = "Index2";
                public readonly string ListServiceMenus = "ListServiceMenus";
                public readonly string Setting = "Setting";
            }
            public readonly string _CheckLogin = "~/Views/PrivateTraining/_CheckLogin.cshtml";
            public readonly string _ListComment = "~/Views/PrivateTraining/_ListComment.cshtml";
            public readonly string _ListServiceProvider = "~/Views/PrivateTraining/_ListServiceProvider.cshtml";
            public readonly string _SelectWorkUnit = "~/Views/PrivateTraining/_SelectWorkUnit.cshtml";
            public readonly string _ShowListPriceWorkUnit = "~/Views/PrivateTraining/_ShowListPriceWorkUnit.cshtml";
            public readonly string ApproveServices = "~/Views/PrivateTraining/ApproveServices.cshtml";
            public readonly string ApproveServices_new = "~/Views/PrivateTraining/ApproveServices_new.cshtml";
            public readonly string ApproveServices_v2 = "~/Views/PrivateTraining/ApproveServices_v2.cshtml";
            public readonly string ApproveServicesGetinformationServiceReceivers = "~/Views/PrivateTraining/ApproveServicesGetinformationServiceReceivers.cshtml";
            public readonly string Index = "~/Views/PrivateTraining/Index.cshtml";
            public readonly string Index2 = "~/Views/PrivateTraining/Index2.cshtml";
            public readonly string ListServiceMenus = "~/Views/PrivateTraining/ListServiceMenus.cshtml";
            public readonly string Setting = "~/Views/PrivateTraining/Setting.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_PrivateTrainingController : PrivateTraining.Controllers.PrivateTrainingController
    {
        public T4MVC_PrivateTrainingController() : base(Dummy.Instance) { }

        [NonAction]
        partial void MenuListOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> MenuList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.MenuList);
            MenuListOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ListServiceMenusOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ListServiceMenus()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ListServiceMenus);
            ListServiceMenusOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ApproveServicesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int ServiceReceiverServiceLocationId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ApproveServices(int ServiceReceiverServiceLocationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveServices);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceReceiverServiceLocationId", ServiceReceiverServiceLocationId);
            ApproveServicesOverride(callInfo, ServiceReceiverServiceLocationId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ApproveServicesGetinformationServiceReceiversOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ApproveServicesGetinformationServiceReceivers()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ApproveServicesGetinformationServiceReceivers);
            ApproveServicesGetinformationServiceReceiversOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void GetApproveServiceInfoOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int StateId, int CityId, int LocationId, System.Collections.Generic.List<PrivateTraining.DomainClasses.EntitiesView.PrivateTrainig.SelectServiceProviderForService> ServiceProviderAndServices, int ServiceReceiverServiceLocationId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetApproveServiceInfo(int StateId, int CityId, int LocationId, System.Collections.Generic.List<PrivateTraining.DomainClasses.EntitiesView.PrivateTrainig.SelectServiceProviderForService> ServiceProviderAndServices, int ServiceReceiverServiceLocationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetApproveServiceInfo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "StateId", StateId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "CityId", CityId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "LocationId", LocationId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceProviderAndServices", ServiceProviderAndServices);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceReceiverServiceLocationId", ServiceReceiverServiceLocationId);
            GetApproveServiceInfoOverride(callInfo, StateId, CityId, LocationId, ServiceProviderAndServices, ServiceReceiverServiceLocationId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void AddApproveServicesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.EntitiesView.PrivateTrainig.View_ApproveService approve);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddApproveServices(PrivateTraining.DomainClasses.EntitiesView.PrivateTrainig.View_ApproveService approve)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddApproveServices);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "approve", approve);
            AddApproveServicesOverride(callInfo, approve);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void EditApproveServicesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.EntitiesView.PrivateTrainig.View_ApproveService param);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditApproveServices(PrivateTraining.DomainClasses.EntitiesView.PrivateTrainig.View_ApproveService param)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditApproveServices);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            EditApproveServicesOverride(callInfo, param);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void LoadFormOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int FormId);

        [NonAction]
        public override System.Web.Mvc.JsonResult LoadForm(int FormId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadForm);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "FormId", FormId);
            LoadFormOverride(callInfo, FormId);
            return callInfo;
        }

        [NonAction]
        partial void AnswerFormAssessmentOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, System.Collections.Generic.List<PrivateTraining.DomainClasses.Entities.PrivateTraining.FormAnswer> AnswerFormAssessment, int SRSLId, int FormId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AnswerFormAssessment(System.Collections.Generic.List<PrivateTraining.DomainClasses.Entities.PrivateTraining.FormAnswer> AnswerFormAssessment, int SRSLId, int FormId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AnswerFormAssessment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "AnswerFormAssessment", AnswerFormAssessment);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SRSLId", SRSLId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "FormId", FormId);
            AnswerFormAssessmentOverride(callInfo, AnswerFormAssessment, SRSLId, FormId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void SettingOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Setting()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Setting);
            SettingOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void SaveSettingsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, bool ShowPayOnline);

        [NonAction]
        public override System.Web.Mvc.JsonResult SaveSettings(bool ShowPayOnline)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.SaveSettings);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ShowPayOnline", ShowPayOnline);
            SaveSettingsOverride(callInfo, ShowPayOnline);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
