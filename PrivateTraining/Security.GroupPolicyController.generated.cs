// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace PrivateTraining.Areas.Security.Controllers
{
    public partial class GroupPolicyController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected GroupPolicyController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> SaveGroup()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.SaveGroup);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteGroupPolicy()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteGroupPolicy);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetListUserNames()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetListUserNames);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddUserInGroupPolicy()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddUserInGroupPolicy);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteUserInGroupPolicy()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteUserInGroupPolicy);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public GroupPolicyController Actions { get { return MVC.Security.GroupPolicy; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Security";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "GroupPolicy";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "GroupPolicy";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string SaveGroup = "SaveGroup";
            public readonly string GetGroupPolicy = "GetGroupPolicy";
            public readonly string DeleteGroupPolicy = "DeleteGroupPolicy";
            public readonly string UserInGroup = "UserInGroup";
            public readonly string GetListUserNames = "GetListUserNames";
            public readonly string AddUserInGroupPolicy = "AddUserInGroupPolicy";
            public readonly string GetUserInGroupPolicy = "GetUserInGroupPolicy";
            public readonly string DeleteUserInGroupPolicy = "DeleteUserInGroupPolicy";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string SaveGroup = "SaveGroup";
            public const string GetGroupPolicy = "GetGroupPolicy";
            public const string DeleteGroupPolicy = "DeleteGroupPolicy";
            public const string UserInGroup = "UserInGroup";
            public const string GetListUserNames = "GetListUserNames";
            public const string AddUserInGroupPolicy = "AddUserInGroupPolicy";
            public const string GetUserInGroupPolicy = "GetUserInGroupPolicy";
            public const string DeleteUserInGroupPolicy = "DeleteUserInGroupPolicy";
        }


        static readonly ActionParamsClass_SaveGroup s_params_SaveGroup = new ActionParamsClass_SaveGroup();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SaveGroup SaveGroupParams { get { return s_params_SaveGroup; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SaveGroup
        {
            public readonly string GroupPolicy = "GroupPolicy";
        }
        static readonly ActionParamsClass_DeleteGroupPolicy s_params_DeleteGroupPolicy = new ActionParamsClass_DeleteGroupPolicy();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteGroupPolicy DeleteGroupPolicyParams { get { return s_params_DeleteGroupPolicy; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteGroupPolicy
        {
            public readonly string GroupId = "GroupId";
        }
        static readonly ActionParamsClass_GetListUserNames s_params_GetListUserNames = new ActionParamsClass_GetListUserNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetListUserNames GetListUserNamesParams { get { return s_params_GetListUserNames; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetListUserNames
        {
            public readonly string groupId = "groupId";
            public readonly string word = "word";
            public readonly string RoleId = "RoleId";
        }
        static readonly ActionParamsClass_AddUserInGroupPolicy s_params_AddUserInGroupPolicy = new ActionParamsClass_AddUserInGroupPolicy();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddUserInGroupPolicy AddUserInGroupPolicyParams { get { return s_params_AddUserInGroupPolicy; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddUserInGroupPolicy
        {
            public readonly string UserId = "UserId";
            public readonly string GroupId = "GroupId";
        }
        static readonly ActionParamsClass_GetUserInGroupPolicy s_params_GetUserInGroupPolicy = new ActionParamsClass_GetUserInGroupPolicy();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetUserInGroupPolicy GetUserInGroupPolicyParams { get { return s_params_GetUserInGroupPolicy; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetUserInGroupPolicy
        {
            public readonly string word = "word";
        }
        static readonly ActionParamsClass_DeleteUserInGroupPolicy s_params_DeleteUserInGroupPolicy = new ActionParamsClass_DeleteUserInGroupPolicy();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteUserInGroupPolicy DeleteUserInGroupPolicyParams { get { return s_params_DeleteUserInGroupPolicy; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteUserInGroupPolicy
        {
            public readonly string grouppolicyid = "grouppolicyid";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _DeleteGroup = "_DeleteGroup";
                public readonly string Index = "Index";
                public readonly string UserInGroup = "UserInGroup";
            }
            public readonly string _DeleteGroup = "~/Areas/Security/Views/GroupPolicy/_DeleteGroup.cshtml";
            public readonly string Index = "~/Areas/Security/Views/GroupPolicy/Index.cshtml";
            public readonly string UserInGroup = "~/Areas/Security/Views/GroupPolicy/UserInGroup.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_GroupPolicyController : PrivateTraining.Areas.Security.Controllers.GroupPolicyController
    {
        public T4MVC_GroupPolicyController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void SaveGroupOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.Security.GroupPolicy GroupPolicy);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> SaveGroup(PrivateTraining.DomainClasses.Entities.Security.GroupPolicy GroupPolicy)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.SaveGroup);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "GroupPolicy", GroupPolicy);
            SaveGroupOverride(callInfo, GroupPolicy);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetGroupPolicyOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetGroupPolicy()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetGroupPolicy);
            GetGroupPolicyOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void DeleteGroupPolicyOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int GroupId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteGroupPolicy(int GroupId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteGroupPolicy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "GroupId", GroupId);
            DeleteGroupPolicyOverride(callInfo, GroupId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void UserInGroupOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> UserInGroup()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.UserInGroup);
            UserInGroupOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void GetListUserNamesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int groupId, string word, int RoleId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetListUserNames(int groupId, string word, int RoleId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetListUserNames);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "groupId", groupId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "word", word);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RoleId", RoleId);
            GetListUserNamesOverride(callInfo, groupId, word, RoleId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void AddUserInGroupPolicyOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int UserId, int GroupId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddUserInGroupPolicy(int UserId, int GroupId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddUserInGroupPolicy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "GroupId", GroupId);
            AddUserInGroupPolicyOverride(callInfo, UserId, GroupId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetUserInGroupPolicyOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string word);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetUserInGroupPolicy(string word)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetUserInGroupPolicy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "word", word);
            GetUserInGroupPolicyOverride(callInfo, word);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void DeleteUserInGroupPolicyOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int grouppolicyid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteUserInGroupPolicy(int grouppolicyid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteUserInGroupPolicy);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "grouppolicyid", grouppolicyid);
            DeleteUserInGroupPolicyOverride(callInfo, grouppolicyid);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
