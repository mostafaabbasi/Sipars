// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace PrivateTraining.Areas.BaseInfo.Controllers
{
    public partial class BaseInfoController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected BaseInfoController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListCity()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListCity);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddState()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddState);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteState()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteState);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditState()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditState);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEditState()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEditState);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddCity()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddCity);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteCity()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteCity);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditCity()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditCity);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEditCity()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEditCity);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public BaseInfoController Actions { get { return MVC.BaseInfo.BaseInfo; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "BaseInfo";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "BaseInfo";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "BaseInfo";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string GetCity = "GetCity";
            public readonly string ListCity = "ListCity";
            public readonly string GetStates = "GetStates";
            public readonly string ListStates = "ListStates";
            public readonly string AddState = "AddState";
            public readonly string DeleteState = "DeleteState";
            public readonly string EditState = "EditState";
            public readonly string LoadEditState = "LoadEditState";
            public readonly string GetCitys = "GetCitys";
            public readonly string ListCitys = "ListCitys";
            public readonly string AddCity = "AddCity";
            public readonly string DeleteCity = "DeleteCity";
            public readonly string EditCity = "EditCity";
            public readonly string LoadEditCity = "LoadEditCity";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string GetCity = "GetCity";
            public const string ListCity = "ListCity";
            public const string GetStates = "GetStates";
            public const string ListStates = "ListStates";
            public const string AddState = "AddState";
            public const string DeleteState = "DeleteState";
            public const string EditState = "EditState";
            public const string LoadEditState = "LoadEditState";
            public const string GetCitys = "GetCitys";
            public const string ListCitys = "ListCitys";
            public const string AddCity = "AddCity";
            public const string DeleteCity = "DeleteCity";
            public const string EditCity = "EditCity";
            public const string LoadEditCity = "LoadEditCity";
        }


        static readonly ActionParamsClass_ListCity s_params_ListCity = new ActionParamsClass_ListCity();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListCity ListCityParams { get { return s_params_ListCity; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListCity
        {
            public readonly string StateId = "StateId";
            public readonly string DefaultCityId = "DefaultCityId";
        }
        static readonly ActionParamsClass_AddState s_params_AddState = new ActionParamsClass_AddState();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddState AddStateParams { get { return s_params_AddState; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddState
        {
            public readonly string States = "States";
        }
        static readonly ActionParamsClass_DeleteState s_params_DeleteState = new ActionParamsClass_DeleteState();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteState DeleteStateParams { get { return s_params_DeleteState; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteState
        {
            public readonly string StateId = "StateId";
        }
        static readonly ActionParamsClass_EditState s_params_EditState = new ActionParamsClass_EditState();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditState EditStateParams { get { return s_params_EditState; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditState
        {
            public readonly string param = "param";
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_LoadEditState s_params_LoadEditState = new ActionParamsClass_LoadEditState();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadEditState LoadEditStateParams { get { return s_params_LoadEditState; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadEditState
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_AddCity s_params_AddCity = new ActionParamsClass_AddCity();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddCity AddCityParams { get { return s_params_AddCity; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddCity
        {
            public readonly string Citys = "Citys";
        }
        static readonly ActionParamsClass_DeleteCity s_params_DeleteCity = new ActionParamsClass_DeleteCity();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteCity DeleteCityParams { get { return s_params_DeleteCity; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteCity
        {
            public readonly string CityId = "CityId";
        }
        static readonly ActionParamsClass_EditCity s_params_EditCity = new ActionParamsClass_EditCity();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditCity EditCityParams { get { return s_params_EditCity; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditCity
        {
            public readonly string param = "param";
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_LoadEditCity s_params_LoadEditCity = new ActionParamsClass_LoadEditCity();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadEditCity LoadEditCityParams { get { return s_params_LoadEditCity; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadEditCity
        {
            public readonly string Id = "Id";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _AddEditCity = "_AddEditCity";
                public readonly string _AddEditState = "_AddEditState";
                public readonly string _DeleteCity = "_DeleteCity";
                public readonly string _DeleteState = "_DeleteState";
                public readonly string GetCitys = "GetCitys";
                public readonly string GetStates = "GetStates";
            }
            public readonly string _AddEditCity = "~/Areas/BaseInfo/Views/BaseInfo/_AddEditCity.cshtml";
            public readonly string _AddEditState = "~/Areas/BaseInfo/Views/BaseInfo/_AddEditState.cshtml";
            public readonly string _DeleteCity = "~/Areas/BaseInfo/Views/BaseInfo/_DeleteCity.cshtml";
            public readonly string _DeleteState = "~/Areas/BaseInfo/Views/BaseInfo/_DeleteState.cshtml";
            public readonly string GetCitys = "~/Areas/BaseInfo/Views/BaseInfo/GetCitys.cshtml";
            public readonly string GetStates = "~/Areas/BaseInfo/Views/BaseInfo/GetStates.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_BaseInfoController : PrivateTraining.Areas.BaseInfo.Controllers.BaseInfoController
    {
        public T4MVC_BaseInfoController() : base(Dummy.Instance) { }

        [NonAction]
        partial void GetCityOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult GetCity()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetCity);
            GetCityOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ListCityOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int StateId, int DefaultCityId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListCity(int StateId, int DefaultCityId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListCity);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "StateId", StateId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DefaultCityId", DefaultCityId);
            ListCityOverride(callInfo, StateId, DefaultCityId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetStatesOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult GetStates()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetStates);
            GetStatesOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ListStatesOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListStates()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListStates);
            ListStatesOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void AddStateOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.BaseTable.State States);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddState(PrivateTraining.DomainClasses.Entities.BaseTable.State States)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddState);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "States", States);
            AddStateOverride(callInfo, States);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void DeleteStateOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string[] StateId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteState(string[] StateId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteState);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "StateId", StateId);
            DeleteStateOverride(callInfo, StateId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void EditStateOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.BaseTable.State param, int id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditState(PrivateTraining.DomainClasses.Entities.BaseTable.State param, int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditState);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditStateOverride(callInfo, param, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void LoadEditStateOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int Id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEditState(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEditState);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            LoadEditStateOverride(callInfo, Id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetCitysOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult GetCitys()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetCitys);
            GetCitysOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ListCitysOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListCitys()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListCitys);
            ListCitysOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void AddCityOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.BaseTable.City Citys);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddCity(PrivateTraining.DomainClasses.Entities.BaseTable.City Citys)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddCity);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Citys", Citys);
            AddCityOverride(callInfo, Citys);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void DeleteCityOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string[] CityId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteCity(string[] CityId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteCity);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "CityId", CityId);
            DeleteCityOverride(callInfo, CityId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void EditCityOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.BaseTable.City param, int id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditCity(PrivateTraining.DomainClasses.Entities.BaseTable.City param, int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditCity);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditCityOverride(callInfo, param, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void LoadEditCityOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int Id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEditCity(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEditCity);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            LoadEditCityOverride(callInfo, Id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
