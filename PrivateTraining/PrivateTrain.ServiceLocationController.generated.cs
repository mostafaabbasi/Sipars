// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace PrivateTraining.Areas.PrivateTrain.Controllers
{
    public partial class ServiceLocationController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ServiceLocationController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddServiceLocation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddServiceLocation);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEditServiceLocationPrivate()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEditServiceLocationPrivate);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditServiceLocationPrivate()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditServiceLocationPrivate);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEditLocation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEditLocation);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteLocation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteLocation);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteServiceLocation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteServiceLocation);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditLocationAndServiceLocations()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditLocationAndServiceLocations);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult ListLocationGetByCityId()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListLocationGetByCityId);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult ListServiceLocationGetByCityId()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListServiceLocationGetByCityId);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ServiceLocationController Actions { get { return MVC.PrivateTrain.ServiceLocation; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "PrivateTrain";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "ServiceLocation";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "ServiceLocation";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Location = "Location";
            public readonly string AddServiceLocation = "AddServiceLocation";
            public readonly string ListLocation = "ListLocation";
            public readonly string GetListServiceLocation = "GetListServiceLocation";
            public readonly string ListServiceLocation = "ListServiceLocation";
            public readonly string GetServiceLocationPrivate = "GetServiceLocationPrivate";
            public readonly string LoadEditServiceLocationPrivate = "LoadEditServiceLocationPrivate";
            public readonly string EditServiceLocationPrivate = "EditServiceLocationPrivate";
            public readonly string LoadEditLocation = "LoadEditLocation";
            public readonly string DeleteLocation = "DeleteLocation";
            public readonly string DeleteServiceLocation = "DeleteServiceLocation";
            public readonly string EditLocationAndServiceLocations = "EditLocationAndServiceLocations";
            public readonly string ListLocationGetByCityId = "ListLocationGetByCityId";
            public readonly string ListServiceLocationGetByCityId = "ListServiceLocationGetByCityId";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Location = "Location";
            public const string AddServiceLocation = "AddServiceLocation";
            public const string ListLocation = "ListLocation";
            public const string GetListServiceLocation = "GetListServiceLocation";
            public const string ListServiceLocation = "ListServiceLocation";
            public const string GetServiceLocationPrivate = "GetServiceLocationPrivate";
            public const string LoadEditServiceLocationPrivate = "LoadEditServiceLocationPrivate";
            public const string EditServiceLocationPrivate = "EditServiceLocationPrivate";
            public const string LoadEditLocation = "LoadEditLocation";
            public const string DeleteLocation = "DeleteLocation";
            public const string DeleteServiceLocation = "DeleteServiceLocation";
            public const string EditLocationAndServiceLocations = "EditLocationAndServiceLocations";
            public const string ListLocationGetByCityId = "ListLocationGetByCityId";
            public const string ListServiceLocationGetByCityId = "ListServiceLocationGetByCityId";
        }


        static readonly ActionParamsClass_AddServiceLocation s_params_AddServiceLocation = new ActionParamsClass_AddServiceLocation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddServiceLocation AddServiceLocationParams { get { return s_params_AddServiceLocation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddServiceLocation
        {
            public readonly string paramServiceLocation = "paramServiceLocation";
            public readonly string checkboxPercentOfShares = "checkboxPercentOfShares";
            public readonly string checkboxPriceRegisterServiceProvider = "checkboxPriceRegisterServiceProvider";
            public readonly string checkboxPriceWorkUnitService = "checkboxPriceWorkUnitService";
        }
        static readonly ActionParamsClass_ListServiceLocation s_params_ListServiceLocation = new ActionParamsClass_ListServiceLocation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListServiceLocation ListServiceLocationParams { get { return s_params_ListServiceLocation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListServiceLocation
        {
            public readonly string StateId = "StateId";
            public readonly string CityId = "CityId";
            public readonly string LocationId = "LocationId";
            public readonly string ServiceId = "ServiceId";
        }
        static readonly ActionParamsClass_GetServiceLocationPrivate s_params_GetServiceLocationPrivate = new ActionParamsClass_GetServiceLocationPrivate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetServiceLocationPrivate GetServiceLocationPrivateParams { get { return s_params_GetServiceLocationPrivate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetServiceLocationPrivate
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_LoadEditServiceLocationPrivate s_params_LoadEditServiceLocationPrivate = new ActionParamsClass_LoadEditServiceLocationPrivate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadEditServiceLocationPrivate LoadEditServiceLocationPrivateParams { get { return s_params_LoadEditServiceLocationPrivate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadEditServiceLocationPrivate
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_EditServiceLocationPrivate s_params_EditServiceLocationPrivate = new ActionParamsClass_EditServiceLocationPrivate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditServiceLocationPrivate EditServiceLocationPrivateParams { get { return s_params_EditServiceLocationPrivate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditServiceLocationPrivate
        {
            public readonly string paramServiceLocation = "paramServiceLocation";
            public readonly string Workunits = "Workunits";
            public readonly string PriceWorkUnits = "PriceWorkUnits";
        }
        static readonly ActionParamsClass_LoadEditLocation s_params_LoadEditLocation = new ActionParamsClass_LoadEditLocation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadEditLocation LoadEditLocationParams { get { return s_params_LoadEditLocation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadEditLocation
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_DeleteLocation s_params_DeleteLocation = new ActionParamsClass_DeleteLocation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteLocation DeleteLocationParams { get { return s_params_DeleteLocation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteLocation
        {
            public readonly string LocationId = "LocationId";
        }
        static readonly ActionParamsClass_DeleteServiceLocation s_params_DeleteServiceLocation = new ActionParamsClass_DeleteServiceLocation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteServiceLocation DeleteServiceLocationParams { get { return s_params_DeleteServiceLocation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteServiceLocation
        {
            public readonly string ServiceLocationId = "ServiceLocationId";
        }
        static readonly ActionParamsClass_EditLocationAndServiceLocations s_params_EditLocationAndServiceLocations = new ActionParamsClass_EditLocationAndServiceLocations();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditLocationAndServiceLocations EditLocationAndServiceLocationsParams { get { return s_params_EditLocationAndServiceLocations; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditLocationAndServiceLocations
        {
            public readonly string param = "param";
            public readonly string id = "id";
            public readonly string checkboxPercentOfShares = "checkboxPercentOfShares";
            public readonly string checkboxPriceRegisterServiceProvider = "checkboxPriceRegisterServiceProvider";
            public readonly string checkboxPriceWorkUnitService = "checkboxPriceWorkUnitService";
        }
        static readonly ActionParamsClass_ListLocationGetByCityId s_params_ListLocationGetByCityId = new ActionParamsClass_ListLocationGetByCityId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListLocationGetByCityId ListLocationGetByCityIdParams { get { return s_params_ListLocationGetByCityId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListLocationGetByCityId
        {
            public readonly string CityId = "CityId";
            public readonly string DefaultLocationId = "DefaultLocationId";
            public readonly string UserId = "UserId";
        }
        static readonly ActionParamsClass_ListServiceLocationGetByCityId s_params_ListServiceLocationGetByCityId = new ActionParamsClass_ListServiceLocationGetByCityId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListServiceLocationGetByCityId ListServiceLocationGetByCityIdParams { get { return s_params_ListServiceLocationGetByCityId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListServiceLocationGetByCityId
        {
            public readonly string CityId = "CityId";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _AddEdit = "_AddEdit";
                public readonly string _Delete = "_Delete";
                public readonly string GetListServiceLocation = "GetListServiceLocation";
                public readonly string GetServiceLocationPrivate = "GetServiceLocationPrivate";
                public readonly string Location = "Location";
            }
            public readonly string _AddEdit = "~/Areas/PrivateTrain/Views/ServiceLocation/_AddEdit.cshtml";
            public readonly string _Delete = "~/Areas/PrivateTrain/Views/ServiceLocation/_Delete.cshtml";
            public readonly string GetListServiceLocation = "~/Areas/PrivateTrain/Views/ServiceLocation/GetListServiceLocation.cshtml";
            public readonly string GetServiceLocationPrivate = "~/Areas/PrivateTrain/Views/ServiceLocation/GetServiceLocationPrivate.cshtml";
            public readonly string Location = "~/Areas/PrivateTrain/Views/ServiceLocation/Location.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ServiceLocationController : PrivateTraining.Areas.PrivateTrain.Controllers.ServiceLocationController
    {
        public T4MVC_ServiceLocationController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void LocationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Location()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Location);
            LocationOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AddServiceLocationOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.EntitiesView.PrivateTrainig.View_ServiceLocations paramServiceLocation, int checkboxPercentOfShares, int checkboxPriceRegisterServiceProvider, int checkboxPriceWorkUnitService);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddServiceLocation(PrivateTraining.DomainClasses.EntitiesView.PrivateTrainig.View_ServiceLocations paramServiceLocation, int checkboxPercentOfShares, int checkboxPriceRegisterServiceProvider, int checkboxPriceWorkUnitService)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddServiceLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "paramServiceLocation", paramServiceLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "checkboxPercentOfShares", checkboxPercentOfShares);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "checkboxPriceRegisterServiceProvider", checkboxPriceRegisterServiceProvider);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "checkboxPriceWorkUnitService", checkboxPriceWorkUnitService);
            AddServiceLocationOverride(callInfo, paramServiceLocation, checkboxPercentOfShares, checkboxPriceRegisterServiceProvider, checkboxPriceWorkUnitService);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ListLocationOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListLocation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListLocation);
            ListLocationOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetListServiceLocationOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> GetListServiceLocation()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetListServiceLocation);
            GetListServiceLocationOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void ListServiceLocationOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int StateId, int CityId, int LocationId, int ServiceId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListServiceLocation(int StateId, int CityId, int LocationId, int ServiceId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListServiceLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "StateId", StateId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "CityId", CityId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "LocationId", LocationId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceId", ServiceId);
            ListServiceLocationOverride(callInfo, StateId, CityId, LocationId, ServiceId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void GetServiceLocationPrivateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int Id);

        [NonAction]
        public override System.Web.Mvc.ActionResult GetServiceLocationPrivate(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.GetServiceLocationPrivate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            GetServiceLocationPrivateOverride(callInfo, Id);
            return callInfo;
        }

        [NonAction]
        partial void LoadEditServiceLocationPrivateOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int Id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEditServiceLocationPrivate(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEditServiceLocationPrivate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            LoadEditServiceLocationPrivateOverride(callInfo, Id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void EditServiceLocationPrivateOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.PrivateTraining.View_ServiceLocations paramServiceLocation, System.Collections.Generic.List<int> Workunits, System.Collections.Generic.List<int> PriceWorkUnits);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditServiceLocationPrivate(PrivateTraining.DomainClasses.Entities.PrivateTraining.View_ServiceLocations paramServiceLocation, System.Collections.Generic.List<int> Workunits, System.Collections.Generic.List<int> PriceWorkUnits)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditServiceLocationPrivate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "paramServiceLocation", paramServiceLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Workunits", Workunits);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "PriceWorkUnits", PriceWorkUnits);
            EditServiceLocationPrivateOverride(callInfo, paramServiceLocation, Workunits, PriceWorkUnits);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void LoadEditLocationOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int Id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadEditLocation(int Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadEditLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            LoadEditLocationOverride(callInfo, Id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void DeleteLocationOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string[] LocationId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteLocation(string[] LocationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "LocationId", LocationId);
            DeleteLocationOverride(callInfo, LocationId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void DeleteServiceLocationOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string[] ServiceLocationId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteServiceLocation(string[] ServiceLocationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteServiceLocation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceLocationId", ServiceLocationId);
            DeleteServiceLocationOverride(callInfo, ServiceLocationId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void EditLocationAndServiceLocationsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.EntitiesView.PrivateTrainig.View_ServiceLocations param, int id, int checkboxPercentOfShares, int checkboxPriceRegisterServiceProvider, int checkboxPriceWorkUnitService);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditLocationAndServiceLocations(PrivateTraining.DomainClasses.EntitiesView.PrivateTrainig.View_ServiceLocations param, int id, int checkboxPercentOfShares, int checkboxPriceRegisterServiceProvider, int checkboxPriceWorkUnitService)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditLocationAndServiceLocations);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "checkboxPercentOfShares", checkboxPercentOfShares);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "checkboxPriceRegisterServiceProvider", checkboxPriceRegisterServiceProvider);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "checkboxPriceWorkUnitService", checkboxPriceWorkUnitService);
            EditLocationAndServiceLocationsOverride(callInfo, param, id, checkboxPercentOfShares, checkboxPriceRegisterServiceProvider, checkboxPriceWorkUnitService);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ListLocationGetByCityIdOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int CityId, int DefaultLocationId, int UserId);

        [NonAction]
        public override System.Web.Mvc.JsonResult ListLocationGetByCityId(int CityId, int DefaultLocationId, int UserId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListLocationGetByCityId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "CityId", CityId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "DefaultLocationId", DefaultLocationId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "UserId", UserId);
            ListLocationGetByCityIdOverride(callInfo, CityId, DefaultLocationId, UserId);
            return callInfo;
        }

        [NonAction]
        partial void ListServiceLocationGetByCityIdOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int CityId);

        [NonAction]
        public override System.Web.Mvc.JsonResult ListServiceLocationGetByCityId(int CityId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListServiceLocationGetByCityId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "CityId", CityId);
            ListServiceLocationGetByCityIdOverride(callInfo, CityId);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
