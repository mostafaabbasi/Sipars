// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace PrivateTraining.Areas.PrivateTrain.Controllers
{
    public partial class ServiceReceiverRequestController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ServiceReceiverRequestController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ConfirmServiceReceiverRequest()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ConfirmServiceReceiverRequest);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddServiceReceiverRequest()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddServiceReceiverRequest);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> loadPrice()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.loadPrice);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ServiceReceiverRequestController Actions { get { return MVC.PrivateTrain.ServiceReceiverRequest; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "PrivateTrain";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "ServiceReceiverRequest";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "ServiceReceiverRequest";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string ConfirmServiceReceiverRequest = "ConfirmServiceReceiverRequest";
            public readonly string AddServiceReceiverRequest = "AddServiceReceiverRequest";
            public readonly string loadPrice = "loadPrice";
            public readonly string LoadServiceRequests = "LoadServiceRequests";
            public readonly string ListServicesProvidedForServiceReceiver = "ListServicesProvidedForServiceReceiver";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string ConfirmServiceReceiverRequest = "ConfirmServiceReceiverRequest";
            public const string AddServiceReceiverRequest = "AddServiceReceiverRequest";
            public const string loadPrice = "loadPrice";
            public const string LoadServiceRequests = "LoadServiceRequests";
            public const string ListServicesProvidedForServiceReceiver = "ListServicesProvidedForServiceReceiver";
        }


        static readonly ActionParamsClass_ConfirmServiceReceiverRequest s_params_ConfirmServiceReceiverRequest = new ActionParamsClass_ConfirmServiceReceiverRequest();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ConfirmServiceReceiverRequest ConfirmServiceReceiverRequestParams { get { return s_params_ConfirmServiceReceiverRequest; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ConfirmServiceReceiverRequest
        {
            public readonly string RequestId = "RequestId";
            public readonly string StatusConfirm = "StatusConfirm";
        }
        static readonly ActionParamsClass_AddServiceReceiverRequest s_params_AddServiceReceiverRequest = new ActionParamsClass_AddServiceReceiverRequest();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddServiceReceiverRequest AddServiceReceiverRequestParams { get { return s_params_AddServiceReceiverRequest; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddServiceReceiverRequest
        {
            public readonly string Param = "Param";
        }
        static readonly ActionParamsClass_loadPrice s_params_loadPrice = new ActionParamsClass_loadPrice();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_loadPrice loadPriceParams { get { return s_params_loadPrice; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_loadPrice
        {
            public readonly string Param = "Param";
            public readonly string ServiceId = "ServiceId";
        }
        static readonly ActionParamsClass_LoadServiceRequests s_params_LoadServiceRequests = new ActionParamsClass_LoadServiceRequests();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadServiceRequests LoadServiceRequestsParams { get { return s_params_LoadServiceRequests; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadServiceRequests
        {
            public readonly string ServiceReceiverServiceLocationId = "ServiceReceiverServiceLocationId";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
            }
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ServiceReceiverRequestController : PrivateTraining.Areas.PrivateTrain.Controllers.ServiceReceiverRequestController
    {
        public T4MVC_ServiceReceiverRequestController() : base(Dummy.Instance) { }

        [NonAction]
        partial void ConfirmServiceReceiverRequestOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int RequestId, byte StatusConfirm);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> ConfirmServiceReceiverRequest(int RequestId, byte StatusConfirm)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ConfirmServiceReceiverRequest);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "RequestId", RequestId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "StatusConfirm", StatusConfirm);
            ConfirmServiceReceiverRequestOverride(callInfo, RequestId, StatusConfirm);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [NonAction]
        partial void AddServiceReceiverRequestOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceReceiverRequest Param);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddServiceReceiverRequest(PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceReceiverRequest Param)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddServiceReceiverRequest);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Param", Param);
            AddServiceReceiverRequestOverride(callInfo, Param);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void loadPriceOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceReceiverRequest Param, int ServiceId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> loadPrice(PrivateTraining.DomainClasses.Entities.PrivateTraining.ServiceReceiverRequest Param, int ServiceId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.loadPrice);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Param", Param);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceId", ServiceId);
            loadPriceOverride(callInfo, Param, ServiceId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void LoadServiceRequestsOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int ServiceReceiverServiceLocationId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadServiceRequests(int ServiceReceiverServiceLocationId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadServiceRequests);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceReceiverServiceLocationId", ServiceReceiverServiceLocationId);
            LoadServiceRequestsOverride(callInfo, ServiceReceiverServiceLocationId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ListServicesProvidedForServiceReceiverOverride(T4MVC_System_Web_Mvc_JsonResult callInfo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListServicesProvidedForServiceReceiver()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListServicesProvidedForServiceReceiver);
            ListServicesProvidedForServiceReceiverOverride(callInfo);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
