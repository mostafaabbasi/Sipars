// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace PrivateTraining.Areas.PrivateTrain.Controllers
{
    public partial class ServicesController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ServicesController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetServiceList()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetServiceList);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddService()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddService);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteService()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteService);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditService()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditService);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListSubService()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListSubService);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadServiceUser()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadServiceUser);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ServicesController Actions { get { return MVC.PrivateTrain.Services; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "PrivateTrain";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Services";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Services";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string GetServiceList = "GetServiceList";
            public readonly string AddService = "AddService";
            public readonly string DeleteService = "DeleteService";
            public readonly string EditService = "EditService";
            public readonly string ListSubService = "ListSubService";
            public readonly string LoadServiceUser = "LoadServiceUser";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string GetServiceList = "GetServiceList";
            public const string AddService = "AddService";
            public const string DeleteService = "DeleteService";
            public const string EditService = "EditService";
            public const string ListSubService = "ListSubService";
            public const string LoadServiceUser = "LoadServiceUser";
        }


        static readonly ActionParamsClass_GetServiceList s_params_GetServiceList = new ActionParamsClass_GetServiceList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetServiceList GetServiceListParams { get { return s_params_GetServiceList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetServiceList
        {
            public readonly string param = "param";
        }
        static readonly ActionParamsClass_AddService s_params_AddService = new ActionParamsClass_AddService();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddService AddServiceParams { get { return s_params_AddService; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddService
        {
            public readonly string param = "param";
        }
        static readonly ActionParamsClass_DeleteService s_params_DeleteService = new ActionParamsClass_DeleteService();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteService DeleteServiceParams { get { return s_params_DeleteService; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteService
        {
            public readonly string Id = "Id";
        }
        static readonly ActionParamsClass_EditService s_params_EditService = new ActionParamsClass_EditService();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditService EditServiceParams { get { return s_params_EditService; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditService
        {
            public readonly string param = "param";
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_ListSubService s_params_ListSubService = new ActionParamsClass_ListSubService();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ListSubService ListSubServiceParams { get { return s_params_ListSubService; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ListSubService
        {
            public readonly string ServiceId = "ServiceId";
        }
        static readonly ActionParamsClass_LoadServiceUser s_params_LoadServiceUser = new ActionParamsClass_LoadServiceUser();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_LoadServiceUser LoadServiceUserParams { get { return s_params_LoadServiceUser; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_LoadServiceUser
        {
            public readonly string ServiceId = "ServiceId";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _AddEdit = "_AddEdit";
                public readonly string _Delete = "_Delete";
                public readonly string Index = "Index";
            }
            public readonly string _AddEdit = "~/Areas/PrivateTrain/Views/Services/_AddEdit.cshtml";
            public readonly string _Delete = "~/Areas/PrivateTrain/Views/Services/_Delete.cshtml";
            public readonly string Index = "~/Areas/PrivateTrain/Views/Services/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_ServicesController : PrivateTraining.Areas.PrivateTrain.Controllers.ServicesController
    {
        public T4MVC_ServicesController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void GetServiceListOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.PrivateTraining.Service param);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> GetServiceList(PrivateTraining.DomainClasses.Entities.PrivateTraining.Service param)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.GetServiceList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            GetServiceListOverride(callInfo, param);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void AddServiceOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.PrivateTraining.Service param);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> AddService(PrivateTraining.DomainClasses.Entities.PrivateTraining.Service param)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AddService);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            AddServiceOverride(callInfo, param);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void DeleteServiceOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string Id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> DeleteService(string Id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.DeleteService);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Id", Id);
            DeleteServiceOverride(callInfo, Id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void EditServiceOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, PrivateTraining.DomainClasses.Entities.PrivateTraining.Service param, int id);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> EditService(PrivateTraining.DomainClasses.Entities.PrivateTraining.Service param, int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.EditService);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditServiceOverride(callInfo, param, id);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void ListSubServiceOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int ServiceId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> ListSubService(int ServiceId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.ListSubService);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceId", ServiceId);
            ListSubServiceOverride(callInfo, ServiceId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void LoadServiceUserOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int ServiceId);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> LoadServiceUser(int ServiceId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.LoadServiceUser);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ServiceId", ServiceId);
            LoadServiceUserOverride(callInfo, ServiceId);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
